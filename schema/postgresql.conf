# ============================================================================
# PostgreSQL Configuration for Knowledge Graph System
# ============================================================================
# Optimized for 32-core system with Apache AGE graph queries
# Assumes 32GB+ RAM available
# ============================================================================

# ----------------------------------------------------------------------------
# Parallelism Settings (leverage all 32 cores)
# ----------------------------------------------------------------------------

# Maximum number of background worker processes
# Set to match CPU core count for maximum parallelism
max_worker_processes = 32

# Maximum number of parallel workers that can be active at one time
# Set to ~50% of cores (leave room for other processes)
max_parallel_workers = 16

# Maximum number of parallel workers per query
# Balance between single-query speed and multi-query throughput
# 8 is aggressive but good for complex graph traversals
max_parallel_workers_per_gather = 8

# Maximum number of parallel workers for maintenance operations
# Used for VACUUM, CREATE INDEX, etc.
max_parallel_maintenance_workers = 4

# ----------------------------------------------------------------------------
# Memory Settings (optimized for graph queries)
# ----------------------------------------------------------------------------

# Shared memory buffer pool
# Recommendation: 25% of system RAM for dedicated database server
# 8GB for a 32GB system
shared_buffers = 8GB

# Memory for each operation (sort, hash, etc.) before spilling to disk
# Higher values speed up complex queries with joins/sorts
# 128MB * max_parallel_workers = ~2GB potential usage
work_mem = 128MB

# Memory for maintenance operations (VACUUM, CREATE INDEX, etc.)
# Higher values speed up index creation and maintenance
maintenance_work_mem = 2GB

# PostgreSQL's estimate of OS cache size
# Used by query planner for cost estimation
# Recommendation: 75% of system RAM
# 24GB for a 32GB system
effective_cache_size = 24GB

# ----------------------------------------------------------------------------
# Query Planner Settings
# ----------------------------------------------------------------------------

# Encourage parallel query plans
# Default is 1000, lower values make parallelism more likely
parallel_tuple_cost = 0.01
parallel_setup_cost = 100

# Enable parallel sequential scans
# Important for graph traversal queries
max_parallel_workers_per_gather = 8

# Minimum table size before considering parallel scan (8MB default is good)
min_parallel_table_scan_size = 8MB
min_parallel_index_scan_size = 512kB

# ----------------------------------------------------------------------------
# Connection and Resource Limits
# ----------------------------------------------------------------------------

# Maximum number of concurrent connections
# Keep reasonable to avoid overloading
max_connections = 100

# ----------------------------------------------------------------------------
# Write-Ahead Log (WAL) Settings
# ----------------------------------------------------------------------------

# WAL buffer size (amount of WAL data buffered in memory)
# Larger values can improve write performance
wal_buffers = 16MB

# ----------------------------------------------------------------------------
# Checkpoint Settings
# ----------------------------------------------------------------------------

# Maximum time between automatic WAL checkpoints
checkpoint_timeout = 15min

# Target checkpoint completion time as fraction of checkpoint_timeout
checkpoint_completion_target = 0.9

# Maximum size of WAL before forcing checkpoint
max_wal_size = 4GB
min_wal_size = 1GB

# ----------------------------------------------------------------------------
# Cost-Based Vacuum Delay (optional, for background maintenance)
# ----------------------------------------------------------------------------

# No delay during autovacuum (prioritize performance)
# Change if autovacuum is interfering with queries
autovacuum_max_workers = 4

# ----------------------------------------------------------------------------
# Statistics and Monitoring
# ----------------------------------------------------------------------------

# Track query execution statistics
shared_preload_libraries = 'pg_stat_statements,age'

# Track I/O timing (useful for performance analysis)
track_io_timing = on

# Track query planning time
track_planning = on

# ----------------------------------------------------------------------------
# Apache AGE Specific Settings
# ----------------------------------------------------------------------------

# AGE extension is loaded via shared_preload_libraries above
# Graph name will be created by init scripts

# ----------------------------------------------------------------------------
# Logging (optional, for debugging)
# ----------------------------------------------------------------------------

# Log queries taking longer than 1 second
# Useful for identifying slow graph queries
log_min_duration_statement = 1000

# Log autovacuum activity
log_autovacuum_min_duration = 0

# ----------------------------------------------------------------------------
# Notes
# ----------------------------------------------------------------------------
# After changing this file:
# 1. Restart PostgreSQL container: docker-compose restart postgres
# 2. Verify settings: docker exec knowledge-graph-postgres psql -U admin -d knowledge_graph -c "SHOW ALL"
# 3. Test with a complex graph query to verify parallelism
# 4. Monitor with: docker stats knowledge-graph-postgres
# ============================================================================
