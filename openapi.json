{
    "openapi": "3.1.0",
    "info": {
        "title": "Knowledge Graph API",
        "description": "REST API for knowledge graph ingestion and querying with async job processing",
        "version": "0.1.0 (Phase 1)"
    },
    "paths": {
        "/auth/register": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Register User",
                "description": "Register a new user account.\n\nPassword requirements:\n- Minimum 8 characters\n- Must contain uppercase, lowercase, digit, and special character\n\nReturns user details (password hash excluded).",
                "operationId": "register_user_auth_register_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Login",
                "description": "User login with username and password.\n\nReturns JWT access token and user details.\n\nOAuth2 password flow compatible (for OpenAPI docs).",
                "operationId": "login_auth_login_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_auth_login_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "Get Current User Profile",
                "description": "Get current user profile.\n\nReturns user details for the authenticated user.",
                "operationId": "get_current_user_profile_auth_me_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "authentication"
                ],
                "summary": "Update Current User Profile",
                "description": "Update current user profile.\n\nUsers can only update their own password.\nRole and disabled status can only be changed by admins.",
                "operationId": "update_current_user_profile_auth_me_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/auth/api-keys": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "List Api Keys",
                "description": "List current user's API keys.\n\nReturns list of API keys (plaintext key NOT included).",
                "operationId": "list_api_keys_auth_api_keys_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIKeyRead"
                                    },
                                    "type": "array",
                                    "title": "Response List Api Keys Auth Api Keys Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Create Api Key",
                "description": "Create a new API key.\n\nReturns the plaintext API key (shown ONCE - save it!).",
                "operationId": "create_api_key_auth_api_keys_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIKeyCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIKeyResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/auth/api-keys/{key_id}": {
            "delete": {
                "tags": [
                    "authentication"
                ],
                "summary": "Revoke Api Key",
                "description": "Revoke (delete) an API key.\n\nUsers can only revoke their own API keys.",
                "operationId": "revoke_api_key_auth_api_keys__key_id__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "key_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Key Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List Users",
                "description": "List all users (admin only).\n\nSupports pagination and filtering by role.",
                "operationId": "list_users_users_get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "title": "Limit"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get User",
                "description": "Get user details (admin only).",
                "operationId": "get_user_users__user_id__get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update User",
                "description": "Update user (admin only).\n\nCan update role, disabled status, and password.",
                "operationId": "update_user_users__user_id__put",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Delete User",
                "description": "Delete user (admin only).\n\nCannot delete yourself.\nCascade deletes API keys, sessions, and OAuth tokens.",
                "operationId": "delete_user_users__user_id__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/resources": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "List Resources",
                "description": "List all registered resource types.\n\nAccessible by: admin, curator",
                "operationId": "list_resources_rbac_resources_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ResourceRead"
                                    },
                                    "type": "array",
                                    "title": "Response List Resources Rbac Resources Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "rbac"
                ],
                "summary": "Create Resource",
                "description": "Register a new resource type.\n\nAccessible by: admin only",
                "operationId": "create_resource_rbac_resources_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/rbac/resources/{resource_type}": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "Get Resource",
                "description": "Get resource type details.\n\nAccessible by: admin, curator",
                "operationId": "get_resource_rbac_resources__resource_type__get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "resource_type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Resource Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "rbac"
                ],
                "summary": "Update Resource",
                "description": "Update resource type configuration.\n\nAccessible by: admin only\nCannot update builtin resources.",
                "operationId": "update_resource_rbac_resources__resource_type__put",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "resource_type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Resource Type"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "rbac"
                ],
                "summary": "Delete Resource",
                "description": "Delete a resource type.\n\nAccessible by: admin only\nCannot delete builtin resources or resources with existing permissions.",
                "operationId": "delete_resource_rbac_resources__resource_type__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "resource_type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Resource Type"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/roles": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "List Roles",
                "description": "List all roles.\n\nAccessible by: admin, curator",
                "operationId": "list_roles_rbac_roles_get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "include_inactive",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Include Inactive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RoleRead"
                                    },
                                    "title": "Response List Roles Rbac Roles Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "rbac"
                ],
                "summary": "Create Role",
                "description": "Create a new role.\n\nAccessible by: admin only",
                "operationId": "create_role_rbac_roles_post",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/roles/{role_name}": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "Get Role",
                "description": "Get role details.\n\nAccessible by: admin, curator",
                "operationId": "get_role_rbac_roles__role_name__get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "role_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Role Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "rbac"
                ],
                "summary": "Update Role",
                "description": "Update role configuration.\n\nAccessible by: admin only\nCannot modify builtin roles.",
                "operationId": "update_role_rbac_roles__role_name__put",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "role_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Role Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "rbac"
                ],
                "summary": "Delete Role",
                "description": "Delete a role.\n\nAccessible by: admin only\nCannot delete builtin roles or roles with users/permissions.",
                "operationId": "delete_role_rbac_roles__role_name__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "role_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Role Name"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/permissions": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "List Permissions",
                "description": "List role permissions with optional filtering.\n\nAccessible by: admin, curator",
                "operationId": "list_permissions_rbac_permissions_get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "role_name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Role Name"
                        }
                    },
                    {
                        "name": "resource_type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Resource Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PermissionRead"
                                    },
                                    "title": "Response List Permissions Rbac Permissions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "rbac"
                ],
                "summary": "Create Permission",
                "description": "Grant a permission to a role.\n\nAccessible by: admin only",
                "operationId": "create_permission_rbac_permissions_post",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/permissions/{permission_id}": {
            "delete": {
                "tags": [
                    "rbac"
                ],
                "summary": "Delete Permission",
                "description": "Revoke a permission from a role.\n\nAccessible by: admin only",
                "operationId": "delete_permission_rbac_permissions__permission_id__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "permission_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Permission Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/user-roles/{user_id}": {
            "get": {
                "tags": [
                    "rbac"
                ],
                "summary": "List User Roles",
                "description": "List roles assigned to a user.\n\nAccessible by: admin, curator",
                "operationId": "list_user_roles_rbac_user_roles__user_id__get",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserRoleRead"
                                    },
                                    "title": "Response List User Roles Rbac User Roles  User Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/user-roles": {
            "post": {
                "tags": [
                    "rbac"
                ],
                "summary": "Assign User Role",
                "description": "Assign a role to a user.\n\nAccessible by: admin only",
                "operationId": "assign_user_role_rbac_user_roles_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRoleAssign"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRoleRead"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/rbac/user-roles/{assignment_id}": {
            "delete": {
                "tags": [
                    "rbac"
                ],
                "summary": "Revoke User Role",
                "description": "Revoke a role assignment from a user.\n\nAccessible by: admin only",
                "operationId": "revoke_user_role_rbac_user_roles__assignment_id__delete",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "parameters": [
                    {
                        "name": "assignment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Assignment Id"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rbac/check-permission": {
            "post": {
                "tags": [
                    "rbac"
                ],
                "summary": "Check User Permission",
                "description": "Check if a user has a specific permission (utility endpoint).\n\nAccessible by: admin, curator",
                "operationId": "check_user_permission_rbac_check_permission_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionCheckRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionCheckResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/ingest": {
            "post": {
                "tags": [
                    "ingestion"
                ],
                "summary": "Submit document for async ingestion",
                "description": "Submit a document for async ingestion into the knowledge graph with approval workflow.\n\nImplements ADR-014 job approval workflow with cost estimation before processing.\nDocuments are chunked, analyzed by LLM for concept extraction, and upserted to\nthe graph with semantic relationships.\n\n**Workflow (ADR-014):**\n1. Submit document \u2192 Job created with status `pending`\n2. Analysis runs automatically (fast, estimates costs without LLM calls)\n3. Job status \u2192 `awaiting_approval` with cost/time estimates\n4. Manual approval required via POST /jobs/{job_id}/approve\n5. OR use `auto_approve=true` to skip approval and process immediately\n6. Processing begins \u2192 Watch progress via GET /jobs/{job_id}/stream\n\n**Content Deduplication:**\n- SHA-256 content hash detects duplicate ingestions\n- If same content already exists in same ontology, returns existing job_id\n- Use `force=true` to override and re-process anyway\n- Useful for re-ingestion after system updates or to different ontologies\n\n**Processing Modes:**\n- `serial`: Process chunks one-by-one for clean concept matching (recommended, default)\n- `parallel`: Process chunks concurrently for speed (may create duplicate concepts)\n\n**Chunking Parameters:**\n- `target_words`: Ideal chunk size (default 1000, range 500-2000)\n- `overlap_words`: Word overlap between chunks for context (default 200)\n- Auto-calculated: min_words = target_words * 0.8, max_words = target_words * 1.5\n\n**Returns:**\n- New job: `job_id`, status \"pending (analyzing)\", poll endpoint\n- Duplicate: Existing `job_id` with suggestion to use `force=true` if desired\n\n**Example Response:**\n```json\n{\n  \"job_id\": \"abc123\",\n  \"status\": \"pending (analyzing)\",\n  \"content_hash\": \"sha256:...\",\n  \"message\": \"Job queued. Analysis running. Poll /jobs/abc123 for status.\"\n}\n```",
                "operationId": "ingest_document_ingest_post",
                "parameters": [
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_ingest_document_ingest_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/JobSubmitResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DuplicateJobResponse"
                                        }
                                    ],
                                    "title": "Response Ingest Document Ingest Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ingest/text": {
            "post": {
                "tags": [
                    "ingestion"
                ],
                "summary": "Submit text content for async ingestion",
                "description": "Submit raw text content for async ingestion into the knowledge graph.\n\nAlternative to file upload for direct text submission. Implements the same\nADR-014 approval workflow and deduplication as the file-based endpoint.\n\n**When to Use:**\n- Pasting text directly from clipboard or editor\n- Programmatic ingestion from other systems (APIs, scraping, etc.)\n- Quick testing with small text snippets\n- Ingesting generated or synthetic content\n\n**Workflow:**\n1. Submit text \u2192 Job created with status `pending`\n2. Analysis runs (estimates costs and processing time)\n3. Job status \u2192 `awaiting_approval` with estimates\n4. Manual approval required OR use `auto_approve=true`\n5. Processing begins \u2192 Stream progress via GET /jobs/{job_id}/stream\n\n**Same Features as File Upload:**\n- Content deduplication via SHA-256 hashing\n- Cost estimation before processing\n- Serial/parallel processing modes\n- Configurable chunking parameters\n- 24-hour approval expiration\n\n**Parameters:**\n- `text`: Raw text content (UTF-8 encoded)\n- `filename`: Optional source name for tracking (defaults to \"text_input\")\n- `ontology`: Collection name for organizing concepts\n- `force`: Override duplicate detection\n- `auto_approve`: Skip approval step for immediate processing\n\n**Returns:**\n- New job: `job_id` and status \"pending (analyzing)\"\n- Duplicate: Existing `job_id` with `force=true` suggestion",
                "operationId": "ingest_text_ingest_text_post",
                "parameters": [
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_ingest_text_ingest_text_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/JobSubmitResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DuplicateJobResponse"
                                        }
                                    ],
                                    "title": "Response Ingest Text Ingest Text Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{job_id}": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Get job status",
                "description": "Get the current status of a job.\n\n**Job States (ADR-014):**\n- `pending`: Job queued, analysis running (fast)\n- `awaiting_approval`: Analysis complete, needs user approval\n- `approved`: User approved, waiting for processor\n- `queued`: Legacy state (same as approved)\n- `processing`: Job is currently running\n- `completed`: Job finished successfully (see result field)\n- `failed`: Job failed (see error field)\n- `cancelled`: Job was cancelled or expired\n\n**Polling Recommendations:**\n- Poll every 2-5 seconds while status is \"pending\", \"approved\", \"queued\", or \"processing\"\n- Check `analysis` field when status is \"awaiting_approval\" to see cost estimates\n- Stop polling when status is \"completed\", \"failed\", or \"cancelled\"\n- Use the `progress.percent` field to show progress bar",
                "operationId": "get_job_status_jobs__job_id__get",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobStatus"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "jobs"
                ],
                "summary": "Cancel a job",
                "description": "Cancel a job before it starts processing.\n\n**ADR-014: Can cancel jobs in these states:**\n- `pending`: Job queued, analysis running\n- `awaiting_approval`: Analysis complete, waiting for approval\n- `approved`: Approved but not yet started\n- `queued`: Legacy state\n\n**Cannot cancel:**\n- `processing`: Job already running\n- `completed`, `failed`, `cancelled`: Already finished\n\n**Returns:**\n- 200: Job cancelled successfully\n- 404: Job not found\n- 409: Job cannot be cancelled (already processing or completed)",
                "operationId": "cancel_job_jobs__job_id__delete",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "List jobs",
                "description": "List recent jobs, optionally filtered by status and/or client_id.\n\nUseful for:\n- Viewing jobs awaiting approval: `?status=awaiting_approval`\n- Viewing your own jobs: `?client_id=your-client-id`\n- Viewing another user's jobs: `?client_id=other-user`\n- Monitoring queue backlog\n- Debugging failed jobs\n\nExamples:\n- `GET /jobs?status=awaiting_approval` - Jobs needing approval\n- `GET /jobs?client_id=alice&status=awaiting_approval` - Alice's pending jobs\n- `GET /jobs?status=completed&limit=100` - Last 100 completed jobs",
                "operationId": "list_jobs_jobs_get",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Filter by status (pending|awaiting_approval|approved|queued|processing|completed|failed|cancelled)",
                            "title": "Status"
                        },
                        "description": "Filter by status (pending|awaiting_approval|approved|queued|processing|completed|failed|cancelled)"
                    },
                    {
                        "name": "client_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Filter by client ID (ADR-014: view specific user's jobs)",
                            "title": "Client Id"
                        },
                        "description": "Filter by client ID (ADR-014: view specific user's jobs)"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 500,
                            "minimum": 1,
                            "description": "Maximum jobs to return",
                            "default": 50,
                            "title": "Limit"
                        },
                        "description": "Maximum jobs to return"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Number of jobs to skip (for pagination)",
                            "default": 0,
                            "title": "Offset"
                        },
                        "description": "Number of jobs to skip (for pagination)"
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/JobStatus"
                                    },
                                    "title": "Response List Jobs Jobs Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "jobs"
                ],
                "summary": "Clear all jobs (admin only)",
                "description": "Clear ALL jobs from the database (nuclear option).\n\n**Use with caution!** This deletes all job history.\n\n**Common use cases:**\n- After database reset to sync jobs with empty graph\n- Cleaning up after testing/development\n- Fresh start when migrating systems\n\n**Requires:**\n- `confirm=true` query parameter to prevent accidents\n- Admin authentication (Phase 2)\n\n**Returns:**\n- Number of jobs deleted",
                "operationId": "clear_all_jobs_jobs_delete",
                "parameters": [
                    {
                        "name": "confirm",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Must set to true to confirm deletion",
                            "default": false,
                            "title": "Confirm"
                        },
                        "description": "Must set to true to confirm deletion"
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{job_id}/approve": {
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Approve a job for processing",
                "description": "Approve a job for processing (ADR-014 approval workflow).\n\n**Workflow:**\n1. Job submitted \u2192 status: `pending` (analysis runs automatically)\n2. Analysis complete \u2192 status: `awaiting_approval` (check `analysis` field for costs)\n3. User approves \u2192 status: `approved` (this endpoint)\n4. Job starts \u2192 status: `processing`\n\n**Requirements:**\n- Job must be in `awaiting_approval` status\n- User must have permission (Phase 2: enforced, Phase 1: placeholder)\n\n**Returns:**\n- 200: Job approved and queued for processing\n- 404: Job not found\n- 409: Job not in awaiting_approval status",
                "operationId": "approve_job_jobs__job_id__approve_post",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{job_id}/stream": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Stream job progress (Server-Sent Events)",
                "description": "Stream real-time job progress updates via Server-Sent Events (ADR-018).\n\n**Events sent:**\n- `progress`: Job progress updates (stage, percent, items)\n- `completed`: Job completed successfully\n- `failed`: Job failed with error\n- `error`: Job not found or access denied\n- `keepalive`: Connection keepalive (every 30s)\n\n**SSE Format:**\n```\nevent: progress\ndata: {\"stage\": \"restoring_concepts\", \"percent\": 45, \"items_processed\": 512}\n\nevent: completed\ndata: {\"restore_stats\": {...}}\n```\n\n**Auto-closes stream** when job reaches terminal state (completed/failed/cancelled).\n\n**Polling Fallback**: If SSE fails, client should fall back to `GET /jobs/{job_id}`\n\n**Connection:** Uses HTTP/1.1 chunked transfer encoding. Works through most proxies.",
                "operationId": "stream_job_progress_jobs__job_id__stream_get",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Client-Id"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "X-Api-Key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/search": {
            "post": {
                "tags": [
                    "queries"
                ],
                "summary": "Search Concepts",
                "description": "Search for concepts using semantic similarity with vector embeddings.\n\nGenerates a vector embedding for the query text using the configured AI provider\nand performs cosine similarity search against all concept embeddings in the graph.\nResults include smart threshold hints when few matches are found.\n\n**How It Works:**\n- Query text \u2192 vector embedding (1536 dimensions via OpenAI/Anthropic)\n- Cosine similarity comparison against all concept embeddings\n- Results ranked by similarity score (0.0-1.0, higher is better)\n- Includes evidence counts and source document references\n\n**Best Practices:**\n- Use 2-3 word descriptive phrases for best results (e.g., \"linear thinking patterns\")\n- Default threshold of 70% (0.7) works well for most searches\n- Lower threshold to 50-60% (0.5-0.6) to find broader or weaker matches\n- Response includes threshold hints when additional concepts exist below threshold\n\nArgs:\n    request: Search parameters (query, limit, min_similarity)\n\nReturns:\n    SearchResponse with matching concepts sorted by similarity score, plus\n    smart hints about additional concepts available at lower thresholds\n\nExample:\n    POST /query/search\n    {\n      \"query\": \"linear thinking patterns\",\n      \"limit\": 10,\n      \"min_similarity\": 0.7\n    }",
                "operationId": "search_concepts_query_search_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/concept/{concept_id}": {
            "get": {
                "tags": [
                    "queries"
                ],
                "summary": "Get Concept Details",
                "description": "Get detailed information about a specific concept including all evidence and relationships.\n\nRetrieves complete concept data from the graph including:\n- Concept metadata (unique ID, human-readable label, alternative search terms)\n- Evidence instances (quoted text snippets from source documents)\n- Source document references with paragraph numbers\n- Outgoing relationships to other concepts (with relationship types and optional confidence scores)\n\n**Use Cases:**\n- Inspect evidence supporting a concept extracted from documents\n- Explore semantic relationships connecting this concept to others\n- Verify extraction quality by reviewing source quotes\n- Navigate the knowledge graph by following relationships\n\n**Response Details:**\n- `instances`: Ordered by document and paragraph number for context\n- `relationships`: All outgoing edges from this concept\n- `search_terms`: Alternative phrases that can match this concept in searches\n\nArgs:\n    concept_id: The unique concept identifier (from search results or graph traversal)\n\nReturns:\n    ConceptDetailsResponse with complete concept information including evidence,\n    source documents, and semantic relationships\n\nRaises:\n    404: If concept_id does not exist in the graph\n\nExample:\n    GET /query/concept/linear-scanning-system",
                "operationId": "get_concept_details_query_concept__concept_id__get",
                "parameters": [
                    {
                        "name": "concept_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Concept Id"
                        }
                    },
                    {
                        "name": "include_grounding",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Include Grounding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConceptDetailsResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/related": {
            "post": {
                "tags": [
                    "queries"
                ],
                "summary": "Find Related Concepts",
                "description": "Find concepts related through graph traversal using breadth-first search.\n\nPerforms breadth-first graph traversal from a starting concept to discover\nall connected concepts within a specified maximum distance (hops). Optionally\nfilters by specific relationship types.\n\n**How It Works:**\n- Starts from the specified concept_id\n- Explores outgoing relationships level by level (breadth-first)\n- Returns all reachable concepts within max_depth hops\n- Groups results by distance from starting concept\n\n**Relationship Types:**\n- IMPLIES, SUPPORTS, CONTRADICTS, RESULTS_FROM, ENABLES, etc.\n- Filter to specific types or omit to traverse all relationship types\n- Path includes the sequence of relationship types traversed\n\n**Performance Note:**\n- Depth 1-2: Fast, typically <100 concepts\n- Depth 3-4: Moderate, can return 100s of concepts\n- Depth 5: Slow, may return 1000s of concepts depending on graph density\n\nArgs:\n    request: Related concepts parameters (concept_id, max_depth, relationship_types)\n\nReturns:\n    RelatedConceptsResponse with related concepts grouped by distance,\n    ordered from closest (distance 1) to farthest (distance max_depth)\n\nExample:\n    POST /query/related\n    {\n      \"concept_id\": \"linear-scanning-system\",\n      \"max_depth\": 2,\n      \"relationship_types\": [\"SUPPORTS\", \"IMPLIES\"]\n    }",
                "operationId": "find_related_concepts_query_related_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RelatedConceptsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RelatedConceptsResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/connect": {
            "post": {
                "tags": [
                    "queries"
                ],
                "summary": "Find Connection",
                "description": "Find shortest paths between two concepts using exact concept IDs.\n\nUses Apache AGE graph traversal to find up to 5 shortest paths connecting\ntwo concepts. Requires exact concept IDs (not semantic phrase matching).\n\n**When to Use:**\n- You already have exact concept IDs from search results or details views\n- You want guaranteed exact matches without similarity thresholds\n- You're connecting concepts programmatically with known IDs\n\n**For Semantic Phrase Matching:**\n- Use `/query/connect-by-search` instead to match phrases like \"licensing issues\"\n- That endpoint handles phrase-to-ID matching automatically\n\nArgs:\n    request: Connection parameters (from_id, to_id, max_hops)\n\nReturns:\n    FindConnectionResponse with discovered paths between the exact concepts\n\nRaises:\n    404: If either concept ID does not exist in the graph\n\nExample:\n    POST /query/connect\n    {\n      \"from_id\": \"linear-scanning-system\",\n      \"to_id\": \"genetic-intervention\",\n      \"max_hops\": 5\n    }",
                "operationId": "find_connection_query_connect_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FindConnectionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FindConnectionResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/connect-by-search": {
            "post": {
                "tags": [
                    "queries"
                ],
                "summary": "Find Connection By Search",
                "description": "Find shortest paths between two concepts using semantic phrase matching.\n\nUses vector embeddings to match query phrases to existing concepts based on\nsemantic similarity, then finds shortest paths connecting them.\n\n**Best Practices:**\n- Use specific 2-3 word phrases (e.g., \"licensing issues\" not \"licensing\")\n- Generic single words may not match well due to lack of semantic context\n- Lower threshold (0.3-0.4) to find concepts with weaker similarity\n- Error messages include threshold hints when near-miss concepts exist\n\nArgs:\n    request: Connection parameters (from_query, to_query, max_hops, threshold)\n\nReturns:\n    FindConnectionBySearchResponse with discovered paths, match quality scores,\n    and helpful threshold hints if matches were weak or missing\n\nExample:\n    POST /query/connect-by-search\n    {\n      \"from_query\": \"licensing issues\",\n      \"to_query\": \"AGE benefits\",\n      \"max_hops\": 5,\n      \"threshold\": 0.5\n    }",
                "operationId": "find_connection_by_search_query_connect_by_search_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FindConnectionBySearchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FindConnectionBySearchResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/query/cypher": {
            "post": {
                "tags": [
                    "queries"
                ],
                "summary": "Execute Cypher Query",
                "description": "Execute a raw openCypher query against the Apache AGE graph.\n\nAllows direct execution of openCypher queries for advanced users who want full control.\nReturns nodes and relationships in a format suitable for graph visualization.\n\n**Security Note:** This endpoint executes user-provided queries directly.\nIn production, consider:\n- Read-only query enforcement\n- Query timeout limits\n- Rate limiting\n- User authentication/authorization\n\n**Example Query:**\n```cypher\nMATCH (c:Concept)-[r]->(n:Concept)\nWHERE c.label CONTAINS 'organizational'\nRETURN c, r, n\nLIMIT 50\n```\n\nReturns graph data (nodes + relationships) for visualization.",
                "operationId": "execute_cypher_query_query_cypher_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CypherQueryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CypherQueryResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/database/stats": {
            "get": {
                "tags": [
                    "database"
                ],
                "summary": "Get Database Stats",
                "description": "Get database statistics including node and relationship counts.\n\nReturns:\n    DatabaseStatsResponse with node counts by type and relationship breakdown\n\nExample:\n    GET /database/stats",
                "operationId": "get_database_stats_database_stats_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatabaseStatsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/database/info": {
            "get": {
                "tags": [
                    "database"
                ],
                "summary": "Get Database Info",
                "description": "Get database connection information.\n\nReturns:\n    DatabaseInfoResponse with connection details and version info\n\nExample:\n    GET /database/info",
                "operationId": "get_database_info_database_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatabaseInfoResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/database/health": {
            "get": {
                "tags": [
                    "database"
                ],
                "summary": "Check Database Health",
                "description": "Check database health and connectivity.\n\nPerforms multiple checks:\n- Basic connectivity (ping test)\n- AGE extension availability\n- Graph schema existence\n\nReturns:\n    DatabaseHealthResponse with overall status and check results\n\nExample:\n    GET /database/health",
                "operationId": "check_database_health_database_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatabaseHealthResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ontology/": {
            "get": {
                "tags": [
                    "ontology"
                ],
                "summary": "List Ontologies",
                "description": "List all ontologies in the knowledge graph.\n\nReturns summary statistics for each ontology including\nfile count, chunk count, and concept count.\n\nReturns:\n    OntologyListResponse with all ontologies\n\nExample:\n    GET /ontology/",
                "operationId": "list_ontologies_ontology__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OntologyListResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ontology/{ontology_name}": {
            "get": {
                "tags": [
                    "ontology"
                ],
                "summary": "Get Ontology Info",
                "description": "Get detailed information about a specific ontology.\n\nIncludes:\n- File count and list of files\n- Chunk (source) count\n- Concept count\n- Evidence instance count\n- Relationship count\n\nArgs:\n    ontology_name: Name of the ontology\n\nReturns:\n    OntologyInfoResponse with detailed statistics\n\nRaises:\n    404: If ontology not found\n\nExample:\n    GET /ontology/Research%20Papers",
                "operationId": "get_ontology_info_ontology__ontology_name__get",
                "parameters": [
                    {
                        "name": "ontology_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ontology Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OntologyInfoResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ontology"
                ],
                "summary": "Delete Ontology",
                "description": "Delete an ontology and all its data.\n\n**WARNING: This action cannot be undone!**\n\nDeletes:\n- All Source nodes belonging to the ontology\n- All Instance nodes linked to those sources\n- Orphaned Concept nodes (concepts with no remaining sources)\n- All job records for this ontology (enables clean re-ingestion)\n\nArgs:\n    ontology_name: Name of the ontology to delete\n    force: If True, skip existence check and proceed with deletion\n\nReturns:\n    OntologyDeleteResponse with deletion statistics\n\nRaises:\n    404: If ontology not found (when force=False)\n\nExample:\n    DELETE /ontology/Test%20Ontology?force=true",
                "operationId": "delete_ontology_ontology__ontology_name__delete",
                "parameters": [
                    {
                        "name": "ontology_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ontology Name"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Skip confirmation and force deletion",
                            "default": false,
                            "title": "Force"
                        },
                        "description": "Skip confirmation and force deletion"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OntologyDeleteResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ontology/{ontology_name}/files": {
            "get": {
                "tags": [
                    "ontology"
                ],
                "summary": "Get Ontology Files",
                "description": "List all files in a specific ontology with their statistics.\n\nArgs:\n    ontology_name: Name of the ontology\n\nReturns:\n    OntologyFilesResponse with file details\n\nRaises:\n    404: If ontology not found or has no files\n\nExample:\n    GET /ontology/Research%20Papers/files",
                "operationId": "get_ontology_files_ontology__ontology_name__files_get",
                "parameters": [
                    {
                        "name": "ontology_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ontology Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OntologyFilesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ontology/{ontology_name}/rename": {
            "post": {
                "tags": [
                    "ontology"
                ],
                "summary": "Rename Ontology",
                "description": "Rename an ontology.\n\nUpdates all Source nodes' document property from old_name to new_name.\nThis operation is fast and safe - only affects Source nodes in the specified ontology.\n\nArgs:\n    ontology_name: Current ontology name\n    request: Rename request with new_name\n\nReturns:\n    OntologyRenameResponse with operation statistics\n\nRaises:\n    404: If old ontology not found\n    409: If new ontology name already exists\n\nExample:\n    POST /ontology/Old%20Name/rename\n    {\n      \"new_name\": \"New Name\"\n    }",
                "operationId": "rename_ontology_ontology__ontology_name__rename_post",
                "parameters": [
                    {
                        "name": "ontology_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Ontology Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OntologyRenameRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OntologyRenameResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/status": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get System Status",
                "description": "Get complete system status\n\nReturns status of:\n- Docker containers\n- Database connection\n- Database statistics\n- Python environment\n- Configuration",
                "operationId": "get_system_status_admin_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemStatusResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/backups": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List Backups",
                "description": "List all available backup files\n\nReturns list of backup files with metadata (size, created date, etc.)",
                "operationId": "list_backups_admin_backups_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListBackupsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/backup": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create Backup",
                "description": "Create a database backup (ADR-015 Phase 2: Streaming Download)\n\n**Streams backup directly to client** - no server-side storage.\nClient saves to configured backup directory (~/.local/share/kg/backups).\n\nSupports two modes:\n- **full**: Backup entire database (all ontologies)\n- **ontology**: Backup specific ontology (requires ontology_name)\n\nSupports two formats:\n- **json**: Native format (default) - includes all data, restorable\n- **gexf**: Gephi visualization format - graph structure only, NOT restorable\n\nJSON backup includes:\n- All concepts, sources, and instances\n- Full embeddings (1536-dim vectors)\n- All relationships\n- Metadata and statistics\n\nGEXF export includes:\n- Concepts as nodes (with ontology, search terms, instance count)\n- Relationships as edges (with type, category, confidence)\n- Visual properties (colors by ontology, sizes, edge thickness)\n- Compatible with Gephi for immediate visualization\n\nReturns streaming response with Content-Disposition header.\n\nExample (JSON):\n```json\n{\n    \"backup_type\": \"full\",\n    \"format\": \"json\"\n}\n```\n\nExample (GEXF for Gephi):\n```json\n{\n    \"backup_type\": \"ontology\",\n    \"ontology_name\": \"TBM Model\",\n    \"format\": \"gexf\"\n}\n```",
                "operationId": "create_backup_admin_backup_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/restore": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Restore Backup",
                "description": "Restore a database backup (ADR-015 Phase 2: Multipart Upload)\n\n\u26a0\ufe0f **Potentially destructive operation** - requires username and password.\n\n**Multipart Upload**: Client streams backup file to server.\nServer validates, then queues restore job for background processing.\n\nRestore options:\n- **overwrite**: Whether to overwrite existing data (default: false)\n- **handle_external_deps**: How to handle external dependencies\n  - `prune`: Remove dangling relationships (default)\n  - `stitch`: Try to reconnect to existing concepts\n  - `defer`: Leave broken (requires manual fix)\n\nThe restore process includes:\n1. Save uploaded file to temp location\n2. Run integrity checks (format, references, statistics)\n3. Queue restore worker with job ID\n4. Return job ID for progress tracking\n\n**Authentication required**: Must provide username and password.\n(Currently placeholder - will be validated in production)\n\nReturns job_id for polling restore progress via /jobs/{job_id}\n\nExample (multipart/form-data):\n```\nfile: <backup_file.json>\nusername: admin\npassword: your_password\noverwrite: false\nhandle_external_deps: prune\n```",
                "operationId": "restore_backup_admin_restore_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_restore_backup_admin_restore_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Reset Database",
                "description": "Reset database (DESTRUCTIVE - requires authentication)\n\n\u26a0\ufe0f **DANGER**: This operation:\n- Stops all containers\n- Deletes the PostgreSQL database\n- Removes all data volumes\n- Restarts with a clean database\n- Re-initializes AGE schema\n- Applies all database migrations\n\n\u26a0\ufe0f **CRITICAL**: After reset completes, you MUST restart the API server:\n```bash\n./scripts/stop-api.sh && ./scripts/start-api.sh\n```\nThis clears stale database connections. Without restart, API queries will fail.\n\n**Authentication required**: Must provide username and password.\n(Currently placeholder - will be validated in Phase 2)\n\nMust set `confirm: true` to proceed.\n\nOptional:\n- `clear_logs`: Clear log files (default: true)\n- `clear_checkpoints`: Clear checkpoint files (default: true)\n\nExample:\n```json\n{\n    \"username\": \"admin\",\n    \"password\": \"your_password\",\n    \"confirm\": true,\n    \"clear_logs\": true,\n    \"clear_checkpoints\": true\n}\n```\n\nReturns schema validation results after reset.",
                "operationId": "reset_database_admin_reset_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/scheduler/status": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get Scheduler Status",
                "description": "Get job scheduler status and statistics (ADR-014)\n\nReturns current scheduler configuration and statistics:\n- Running status\n- Configuration (cleanup interval, retention periods)\n- Job counts by status\n- Last cleanup time\n- Next scheduled cleanup\n\nExample response:\n```json\n{\n    \"running\": true,\n    \"config\": {\n        \"cleanup_interval\": 3600,\n        \"approval_timeout\": 24,\n        \"completed_retention\": 48,\n        \"failed_retention\": 168\n    },\n    \"stats\": {\n        \"jobs_by_status\": {\n            \"pending\": 2,\n            \"awaiting_approval\": 5,\n            \"approved\": 1,\n            \"completed\": 100\n        },\n        \"last_cleanup\": \"2025-10-07T10:30:00\",\n        \"next_cleanup\": \"2025-10-07T11:30:00\"\n    }\n}\n```",
                "operationId": "get_scheduler_status_admin_scheduler_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/admin/scheduler/cleanup": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Trigger Scheduler Cleanup",
                "description": "Manually trigger job scheduler cleanup (ADR-014)\n\nForces an immediate cleanup cycle:\n- Cancels unapproved jobs older than approval_timeout\n- Deletes old completed/cancelled jobs\n- Deletes old failed jobs\n\nUseful for:\n- Testing scheduler behavior\n- Emergency cleanup\n- Manual intervention\n\nReturns cleanup results showing what was processed.\n\nExample response:\n```json\n{\n    \"success\": true,\n    \"message\": \"Cleanup completed\",\n    \"processed\": {\n        \"expired_jobs_cancelled\": 3,\n        \"completed_jobs_deleted\": 15,\n        \"failed_jobs_deleted\": 2\n    }\n}\n```",
                "operationId": "trigger_scheduler_cleanup_admin_scheduler_cleanup_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/admin/keys/{provider}": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Set Api Key",
                "description": "Set or rotate system API key for a provider (ADR-031)\n\nStores encrypted API key for this shard's LLM inference.\nValidates the key before storage by making a minimal API call.\n\nSupported providers:\n- `openai`: OpenAI API (GPT-4, GPT-4o, embeddings)\n- `anthropic`: Anthropic API (Claude)\n\nThe key is:\n- Validated against the provider's API\n- Encrypted with Fernet (AES-128-CBC + HMAC-SHA256)\n- Stored in PostgreSQL\n- Decrypted only when needed for inference\n\nRequires admin authentication (placeholder for now).\n\nExample:\n```bash\ncurl -X POST http://localhost:8000/admin/keys/openai \\\n  -F \"api_key=sk-...\"\n```\n\nReturns success message if key validated and stored.",
                "operationId": "set_api_key_admin_keys__provider__post",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Provider"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_set_api_key_admin_keys__provider__post"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Delete Api Key",
                "description": "Delete system API key for a provider (ADR-031)\n\nRemoves the encrypted API key from this shard's storage.\nAfter deletion, inference using this provider will not work\nuntil a new key is configured.\n\nRequires admin authentication (placeholder for now).\n\nExample:\n```bash\ncurl -X DELETE http://localhost:8000/admin/keys/openai\n```\n\nReturns success if key was deleted, 404 if key wasn't configured.",
                "operationId": "delete_api_key_admin_keys__provider__delete",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Provider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/keys": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List Api Keys",
                "description": "List configured API providers with validation status (ADR-031, ADR-041)\n\nReturns list of providers with status (configured/not configured),\nlast update time, validation status, and masked keys.\n\nThe validation status indicates whether the API key was successfully validated:\n- `valid`: Key validated successfully\n- `invalid`: Key validation failed\n- `untested`: Key not yet validated (newly added)\n- `unknown`: Validation tracking not available (migration pending)\n\nDoes NOT return the actual API keys (security) - only masked versions showing\nprefix + last 6 characters (e.g., \"sk-proj-...abc123\").\n\nExample response:\n```json\n[\n    {\n        \"provider\": \"openai\",\n        \"configured\": true,\n        \"updated_at\": \"2025-10-21T10:30:00Z\",\n        \"validation_status\": \"valid\",\n        \"last_validated_at\": \"2025-10-21T10:30:00Z\",\n        \"validation_error\": null,\n        \"masked_key\": \"sk-proj-...abc123\"\n    },\n    {\n        \"provider\": \"anthropic\",\n        \"configured\": false,\n        \"updated_at\": null,\n        \"validation_status\": null,\n        \"last_validated_at\": null,\n        \"validation_error\": null,\n        \"masked_key\": null\n    }\n]\n```",
                "operationId": "list_api_keys_admin_keys_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/admin/regenerate-concept-embeddings": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Regenerate Concept Embeddings",
                "description": "Regenerate embeddings for concept nodes in the graph.\n\nUseful after changing embedding models to update all concept embeddings\nto the new model/dimensions.\n\nArgs:\n    only_missing: Only generate for concepts without embeddings\n    ontology: Limit to specific ontology (optional)\n    limit: Maximum number of concepts to process (for testing)\n\nReturns:\n    Job result with statistics",
                "operationId": "regenerate_concept_embeddings_admin_regenerate_concept_embeddings_post",
                "parameters": [
                    {
                        "name": "only_missing",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Only Missing"
                        }
                    },
                    {
                        "name": "ontology",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Ontology"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/status": {
            "get": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Get Vocabulary Status",
                "description": "Get current vocabulary status including size, zone, and aggressiveness.\n\nReturns:\n    VocabularyStatusResponse with current state\n\nExample:\n    GET /vocabulary/status",
                "operationId": "get_vocabulary_status_vocabulary_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VocabularyStatusResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/types": {
            "get": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "List Edge Types",
                "description": "List all edge types with statistics.\n\nArgs:\n    include_inactive: Include inactive/deprecated types\n    include_builtin: Include builtin protected types\n\nReturns:\n    EdgeTypeListResponse with list of types and counts\n\nExample:\n    GET /vocabulary/types?include_inactive=false&include_builtin=true",
                "operationId": "list_edge_types_vocabulary_types_get",
                "parameters": [
                    {
                        "name": "include_inactive",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Include inactive types",
                            "default": false,
                            "title": "Include Inactive"
                        },
                        "description": "Include inactive types"
                    },
                    {
                        "name": "include_builtin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Include builtin types",
                            "default": true,
                            "title": "Include Builtin"
                        },
                        "description": "Include builtin types"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeTypeListResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Add Edge Type",
                "description": "Manually add a new edge type (curator action).\n\nArgs:\n    request: Edge type details\n\nReturns:\n    EdgeTypeInfo for the newly created type\n\nExample:\n    POST /vocabulary/types\n    {\n        \"relationship_type\": \"OPTIMIZES\",\n        \"category\": \"functional\",\n        \"description\": \"One concept optimizes another\",\n        \"is_builtin\": false\n    }",
                "operationId": "add_edge_type_vocabulary_types_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddEdgeTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeTypeInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/merge": {
            "post": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Merge Edge Types",
                "description": "Merge one edge type into another (curator action).\n\nUpdates all edges to use the target type and marks the deprecated type as inactive.\n\nArgs:\n    request: Merge details\n\nReturns:\n    MergeEdgeTypesResponse with results\n\nExample:\n    POST /vocabulary/merge\n    {\n        \"deprecated_type\": \"AUTHORED_BY\",\n        \"target_type\": \"CREATED_BY\",\n        \"performed_by\": \"curator@example.com\",\n        \"reason\": \"Synonyms with 94% similarity\"\n    }",
                "operationId": "merge_edge_types_vocabulary_merge_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MergeEdgeTypesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MergeEdgeTypesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/consolidate": {
            "post": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Consolidate Vocabulary",
                "description": "Run AITL vocabulary consolidation workflow.\n\nModes:\n- dry_run=True: Evaluate top candidates without executing (validation)\n- dry_run=False: Execute merges automatically based on confidence threshold\n\nProcess:\n1. Get prioritized merge candidates (similarity-based)\n2. Evaluate each with LLM (synonym vs directional inverse)\n3. Auto-execute high confidence (\u2265 auto_execute_threshold)\n4. Flag medium confidence for human review\n5. Reject low confidence or inverse relationships\n\nArgs:\n    request: Consolidation parameters\n\nReturns:\n    ConsolidateVocabularyResponse with results\n\nExample:\n    POST /vocabulary/consolidate\n    {\n        \"target_size\": 80,\n        \"batch_size\": 1,\n        \"auto_execute_threshold\": 0.90,\n        \"dry_run\": false\n    }",
                "operationId": "consolidate_vocabulary_vocabulary_consolidate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConsolidateVocabularyRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsolidateVocabularyResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/generate-embeddings": {
            "post": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Generate Embeddings",
                "description": "Generate embeddings for vocabulary types (bulk operation).\n\nUseful for:\n- Fixing missing embeddings after database issues\n- Regenerating embeddings after model changes\n- Updating embeddings after vocabulary merges\n\nArgs:\n    request: Embedding generation options\n\nReturns:\n    GenerateEmbeddingsResponse with counts of generated/skipped/failed\n\nExample:\n    POST /vocabulary/generate-embeddings\n    {\n        \"force_regenerate\": false,\n        \"only_missing\": true\n    }",
                "operationId": "generate_embeddings_vocabulary_generate_embeddings_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateEmbeddingsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerateEmbeddingsResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/category-scores/{relationship_type}": {
            "get": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Get Category Scores",
                "description": "Get category similarity scores for a relationship type (ADR-047).\n\nReturns detailed breakdown of semantic similarity to all 8 categories:\n- causation, composition, logical, evidential\n- semantic, temporal, dependency, derivation\n\nUses embedding similarity to 30 builtin seed types to compute scores.\nConfidence = max(similarity to any seed in category).\n\nArgs:\n    relationship_type: Edge type to analyze (e.g., \"ENHANCES\")\n\nReturns:\n    CategoryScoresResponse with:\n    - Primary category assignment\n    - Confidence score (0.0-1.0)\n    - Full score breakdown for all categories\n    - Ambiguity flag if runner-up > 0.70\n\nExample:\n    GET /vocabulary/category-scores/ENHANCES\n    {\n        \"relationship_type\": \"ENHANCES\",\n        \"category\": \"causation\",\n        \"confidence\": 0.85,\n        \"scores\": {\n            \"causation\": 0.85,\n            \"composition\": 0.45,\n            ...\n        },\n        \"ambiguous\": false\n    }",
                "operationId": "get_category_scores_vocabulary_category_scores__relationship_type__get",
                "parameters": [
                    {
                        "name": "relationship_type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Relationship Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryScoresResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vocabulary/refresh-categories": {
            "post": {
                "tags": [
                    "vocabulary"
                ],
                "summary": "Refresh Categories",
                "description": "Refresh category assignments for vocabulary types (ADR-047).\n\nRecomputes probabilistic category assignments based on current embeddings.\nUseful after:\n- Vocabulary merges (topology changed)\n- Embedding model changes (semantic space shifted)\n- Seed type adjustments (category definitions updated)\n\nArgs:\n    request: Configuration for refresh operation\n        - only_computed: If True, only refresh types with category_source='computed'\n                       If False, refresh all types (including builtins)\n\nReturns:\n    RefreshCategoriesResponse with counts and detailed assignments\n\nExample:\n    POST /vocabulary/refresh-categories\n    {\n        \"only_computed\": true\n    }\n\n    Response:\n    {\n        \"success\": true,\n        \"refreshed_count\": 88,\n        \"skipped_count\": 0,\n        \"failed_count\": 0,\n        \"assignments\": [\n            {\n                \"relationship_type\": \"ENHANCES\",\n                \"category\": \"causation\",\n                \"confidence\": 0.85,\n                \"scores\": {...},\n                \"ambiguous\": false\n            },\n            ...\n        ],\n        \"message\": \"Refreshed 88 category assignments\"\n    }",
                "operationId": "refresh_categories_vocabulary_refresh_categories_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshCategoriesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshCategoriesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/embedding/config": {
            "get": {
                "tags": [
                    "embedding"
                ],
                "summary": "Get Embedding Config",
                "description": "Get current embedding configuration (public endpoint).\n\nReturns summary information suitable for clients to determine:\n- Which embedding provider is active\n- Model dimensions (for compatibility checks)\n- Whether browser-side embeddings are supported\n\nThis endpoint does not require authentication.",
                "operationId": "get_embedding_config_embedding_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmbeddingConfigResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/config": {
            "get": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Get Embedding Config Detail",
                "description": "Get full embedding configuration details (admin endpoint).\n\nReturns complete configuration including:\n- All resource allocation settings\n- Metadata (created_at, updated_by, etc.)\n- Database config ID\n\nReturns null if no configuration is set.",
                "operationId": "get_embedding_config_detail_admin_embedding_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/EmbeddingConfigDetail"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Embedding Config Detail Admin Embedding Config Get"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Create Embedding Config",
                "description": "Create a new embedding configuration (admin endpoint).\n\nCreates a new INACTIVE configuration entry. Use the activate endpoint to switch to it.\n\n**Workflow:**\n1. Create config: POST /admin/embedding/config (this endpoint)\n2. Review configs: GET /admin/embedding/configs\n3. Activate: POST /admin/embedding/config/{id}/activate\n4. Hot reload: POST /admin/embedding/config/reload\n\n**Validation:**\n- provider='local' requires model_name\n- embedding_dimensions auto-detected from model (can be specified for validation)\n- precision must be 'float16' or 'float32'\n- device must be 'cpu', 'cuda', or 'mps'\n\n**Example (OpenAI):**\n```json\n{\n    \"provider\": \"openai\"\n}\n```\n\n**Example (Local):**\n```json\n{\n    \"provider\": \"local\",\n    \"model_name\": \"nomic-ai/nomic-embed-text-v1.5\",\n    \"precision\": \"float16\",\n    \"max_memory_mb\": 512,\n    \"num_threads\": 4,\n    \"device\": \"cpu\",\n    \"batch_size\": 8\n}\n```",
                "operationId": "create_embedding_config_admin_embedding_config_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEmbeddingConfigRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateEmbeddingConfigResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/config/reload": {
            "post": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Reload Embedding Model",
                "description": "Hot reload embedding model without API restart (zero-downtime updates).\n\nImplements zero-downtime configuration updates:\n1. Load new config from database\n2. Initialize new model in parallel (old model still serves requests)\n3. Atomic swap to new model\n4. In-flight requests complete with old model\n5. Old model garbage collected automatically\n\nNote: Brief 2x memory usage during model loading (1-2 seconds for 300MB-1.3GB models).\n\nFor provider switches:\n- local \u2192 openai: Unloads local model, switches to OpenAI API\n- openai \u2192 local: Loads local model from database config\n- local \u2192 local (different model): Hot swaps to new model\n\nReturns success with new provider details.\n\nExample response:\n```json\n{\n    \"success\": true,\n    \"message\": \"Embedding model reloaded successfully\",\n    \"provider\": \"local\",\n    \"model\": \"nomic-ai/nomic-embed-text-v1.5\",\n    \"dimensions\": 768\n}\n```",
                "operationId": "reload_embedding_model_admin_embedding_config_reload_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReloadEmbeddingModelResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/configs": {
            "get": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "List Embedding Configs",
                "description": "List all embedding configurations (admin endpoint).\n\nReturns all configs (active and inactive) with protection flags.\nUse this to see all historical configurations.",
                "operationId": "list_embedding_configs_admin_embedding_configs_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {},
                                    "type": "array",
                                    "title": "Response List Embedding Configs Admin Embedding Configs Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/config/{config_id}/protect": {
            "post": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Protect Embedding Config",
                "description": "Set protection flags on an embedding configuration (admin endpoint).\n\nProtection flags prevent accidental breaking changes:\n- delete_protected: Prevents deletion without explicit unprotect\n- change_protected: Prevents changing provider/dimensions (breaks vector search)\n\nExample:\n```json\n{\n    \"delete_protected\": true,\n    \"change_protected\": true\n}\n```",
                "operationId": "protect_embedding_config_admin_embedding_config__config_id__protect_post",
                "parameters": [
                    {
                        "name": "config_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Config Id"
                        }
                    },
                    {
                        "name": "delete_protected",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Delete Protected"
                        }
                    },
                    {
                        "name": "change_protected",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Change Protected"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/config/{config_id}": {
            "delete": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Delete Embedding Config Endpoint",
                "description": "Delete an embedding configuration (admin endpoint).\n\nCannot delete configs that are delete-protected.\nRemove protection first if needed.",
                "operationId": "delete_embedding_config_endpoint_admin_embedding_config__config_id__delete",
                "parameters": [
                    {
                        "name": "config_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Config Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/embedding/config/{config_id}/activate": {
            "post": {
                "tags": [
                    "admin",
                    "embedding"
                ],
                "summary": "Activate Embedding Config Endpoint",
                "description": "Activate an embedding configuration with automatic protection management.\n\nThis provides a clean \"unlock \u2192 activate \u2192 lock\" workflow:\n1. Unprotects currently active config (change protection)\n2. Deactivates current config\n3. Activates target config\n4. Protects target config (both delete and change protection)\n\n**Safety checks:**\n- Prevents switching between configs with different embedding dimensions\n- Changing dimensions breaks vector search for all existing concepts\n- Use `?force=true` to bypass dimension check (dangerous!)\n\n**Example workflow:**\n```bash\n# List available configs\nkg admin embedding list\n\n# Activate a preset (e.g., nomic-embed-text-v1.5)\nkg admin embedding activate 3\n\n# Force activation with dimension mismatch (use with caution!)\nkg admin embedding activate 3 --force\n\n# Hot reload to apply changes\nkg admin embedding reload\n```\n\nQuery Parameters:\n- force: Bypass dimension mismatch check (default: false)\n\nReturns:\n- success: True if activation successful\n- config_id: ID of activated config\n- message: Next steps (hot reload recommended)",
                "operationId": "activate_embedding_config_endpoint_admin_embedding_config__config_id__activate_post",
                "parameters": [
                    {
                        "name": "config_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Config Id"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Force"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/extraction/config": {
            "get": {
                "tags": [
                    "extraction"
                ],
                "summary": "Get Extraction Config",
                "description": "Get current AI extraction configuration (public endpoint).\n\nReturns summary information suitable for clients to determine:\n- Which AI provider is active (OpenAI, Anthropic)\n- Model capabilities (vision, JSON mode)\n- Token limits\n\nThis endpoint does not require authentication.",
                "operationId": "get_extraction_config_extraction_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtractionConfigResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/extraction/config": {
            "get": {
                "tags": [
                    "admin",
                    "extraction"
                ],
                "summary": "Get Extraction Config Detail",
                "description": "Get full AI extraction configuration details (admin endpoint).\n\nReturns complete configuration including:\n- Provider and model details\n- Capability flags (vision, JSON mode)\n- Metadata (created_at, updated_by, etc.)\n- Database config ID\n\nReturns null if no configuration is set.",
                "operationId": "get_extraction_config_detail_admin_extraction_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ExtractionConfigDetail"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Get Extraction Config Detail Admin Extraction Config Get"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "admin",
                    "extraction"
                ],
                "summary": "Update Extraction Config",
                "description": "Update AI extraction configuration (admin endpoint).\n\nCreates a new configuration entry and deactivates the previous one.\nConfiguration is stored in kg_api.ai_extraction_config table.\n\n**Important:** Configuration changes are applied immediately (zero-downtime).\nThe next extraction request will use the new provider/model automatically.\n\n**DEVELOPMENT_MODE behavior:**\n- DEVELOPMENT_MODE=true: Configuration changes stored in database but .env takes precedence\n- DEVELOPMENT_MODE=false: Configuration loaded from database (hot-reloadable, recommended)\n\nValidation:\n- provider must be 'openai' or 'anthropic'\n- model_name is required\n\nExample (OpenAI):\n```json\n{\n    \"provider\": \"openai\",\n    \"model_name\": \"gpt-4o\",\n    \"supports_vision\": true,\n    \"supports_json_mode\": true,\n    \"max_tokens\": 16384\n}\n```\n\nExample (Anthropic):\n```json\n{\n    \"provider\": \"anthropic\",\n    \"model_name\": \"claude-sonnet-4-20250514\",\n    \"supports_vision\": true,\n    \"supports_json_mode\": true,\n    \"max_tokens\": 8192\n}\n```",
                "operationId": "update_extraction_config_admin_extraction_config_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateExtractionConfigRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateExtractionConfigResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Root",
                "description": "API health check and info",
                "operationId": "root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Health",
                "description": "Simple health check",
                "operationId": "health_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "APIKeyCreate": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1,
                        "title": "Name",
                        "description": "Human-readable key name"
                    },
                    "scopes": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scopes",
                        "description": "Optional permission scopes"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At",
                        "description": "Optional expiration date"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "APIKeyCreate",
                "description": "Schema for creating a new API key",
                "examples": [
                    {
                        "expires_at": "2026-01-01T00:00:00Z",
                        "name": "CI/CD Pipeline",
                        "scopes": [
                            "read:concepts",
                            "write:ingest"
                        ]
                    }
                ]
            },
            "APIKeyRead": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "description": "API key ID"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Key name"
                    },
                    "scopes": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scopes",
                        "description": "Permission scopes"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "Creation timestamp"
                    },
                    "last_used": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Used",
                        "description": "Last usage timestamp"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At",
                        "description": "Expiration timestamp"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "created_at"
                ],
                "title": "APIKeyRead",
                "description": "Schema for reading API key data (excludes actual key)",
                "examples": [
                    {
                        "created_at": "2025-10-11T12:00:00Z",
                        "expires_at": "2026-01-01T00:00:00Z",
                        "id": 123,
                        "last_used": "2025-10-11T15:30:00Z",
                        "name": "CI/CD Pipeline",
                        "scopes": [
                            "read:concepts",
                            "write:ingest"
                        ]
                    }
                ]
            },
            "APIKeyResponse": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "description": "API key ID"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Key name"
                    },
                    "scopes": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scopes",
                        "description": "Permission scopes"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "Creation timestamp"
                    },
                    "last_used": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Used",
                        "description": "Last usage timestamp"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At",
                        "description": "Expiration timestamp"
                    },
                    "key": {
                        "type": "string",
                        "title": "Key",
                        "description": "Plaintext API key (SAVE THIS - shown only once!)"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "key"
                ],
                "title": "APIKeyResponse",
                "description": "Response when creating API key (includes plaintext key ONCE)",
                "examples": [
                    {
                        "created_at": "2025-10-11T12:00:00Z",
                        "expires_at": "2026-01-01T00:00:00Z",
                        "id": 123,
                        "key": "kg_sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6",
                        "name": "CI/CD Pipeline",
                        "scopes": [
                            "read:concepts",
                            "write:ingest"
                        ]
                    }
                ]
            },
            "AddEdgeTypeRequest": {
                "properties": {
                    "relationship_type": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 3,
                        "title": "Relationship Type"
                    },
                    "category": {
                        "type": "string",
                        "title": "Category"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "is_builtin": {
                        "type": "boolean",
                        "title": "Is Builtin",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "relationship_type",
                    "category"
                ],
                "title": "AddEdgeTypeRequest",
                "description": "Request to manually add edge type"
            },
            "BackupRequest": {
                "properties": {
                    "backup_type": {
                        "type": "string",
                        "title": "Backup Type",
                        "description": "'full' or 'ontology'"
                    },
                    "ontology_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ontology Name",
                        "description": "Required if backup_type is 'ontology'"
                    },
                    "output_filename": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output Filename",
                        "description": "Custom output filename"
                    },
                    "format": {
                        "type": "string",
                        "title": "Format",
                        "description": "Export format: 'json' (native, restorable) or 'gexf' (Gephi visualization)",
                        "default": "json"
                    }
                },
                "type": "object",
                "required": [
                    "backup_type"
                ],
                "title": "BackupRequest",
                "description": "Request to create a backup"
            },
            "Body_ingest_document_ingest_post": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File",
                        "description": "Document file to ingest"
                    },
                    "ontology": {
                        "type": "string",
                        "title": "Ontology",
                        "description": "Ontology/collection name"
                    },
                    "filename": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filename",
                        "description": "Override filename"
                    },
                    "force": {
                        "type": "boolean",
                        "title": "Force",
                        "description": "Force re-ingestion even if duplicate",
                        "default": false
                    },
                    "auto_approve": {
                        "type": "boolean",
                        "title": "Auto Approve",
                        "description": "Auto-approve job (skip approval step)",
                        "default": false
                    },
                    "processing_mode": {
                        "type": "string",
                        "title": "Processing Mode",
                        "description": "Processing mode: serial or parallel (default: serial for clean concept matching)",
                        "default": "serial"
                    },
                    "target_words": {
                        "type": "integer",
                        "title": "Target Words",
                        "description": "Target words per chunk",
                        "default": 1000
                    },
                    "min_words": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Min Words",
                        "description": "Minimum words per chunk"
                    },
                    "max_words": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Words",
                        "description": "Maximum words per chunk"
                    },
                    "overlap_words": {
                        "type": "integer",
                        "title": "Overlap Words",
                        "description": "Overlap between chunks",
                        "default": 200
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "ontology"
                ],
                "title": "Body_ingest_document_ingest_post"
            },
            "Body_ingest_text_ingest_text_post": {
                "properties": {
                    "text": {
                        "type": "string",
                        "title": "Text",
                        "description": "Text content to ingest"
                    },
                    "ontology": {
                        "type": "string",
                        "title": "Ontology",
                        "description": "Ontology/collection name"
                    },
                    "filename": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filename",
                        "description": "Filename for source tracking"
                    },
                    "force": {
                        "type": "boolean",
                        "title": "Force",
                        "description": "Force re-ingestion even if duplicate",
                        "default": false
                    },
                    "auto_approve": {
                        "type": "boolean",
                        "title": "Auto Approve",
                        "description": "Auto-approve job (skip approval step)",
                        "default": false
                    },
                    "processing_mode": {
                        "type": "string",
                        "title": "Processing Mode",
                        "description": "Processing mode: serial or parallel (default: serial for clean concept matching)",
                        "default": "serial"
                    },
                    "target_words": {
                        "type": "integer",
                        "title": "Target Words",
                        "description": "Target words per chunk",
                        "default": 1000
                    },
                    "overlap_words": {
                        "type": "integer",
                        "title": "Overlap Words",
                        "description": "Overlap between chunks",
                        "default": 200
                    }
                },
                "type": "object",
                "required": [
                    "text",
                    "ontology"
                ],
                "title": "Body_ingest_text_ingest_text_post"
            },
            "Body_login_auth_login_post": {
                "properties": {
                    "grant_type": {
                        "anyOf": [
                            {
                                "type": "string",
                                "pattern": "^password$"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grant Type"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "title": "Password"
                    },
                    "scope": {
                        "type": "string",
                        "title": "Scope",
                        "default": ""
                    },
                    "client_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Id"
                    },
                    "client_secret": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "format": "password",
                        "title": "Client Secret"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Body_login_auth_login_post"
            },
            "Body_restore_backup_admin_restore_post": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File",
                        "description": "Backup JSON file to restore"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username",
                        "description": "Username for authentication"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password",
                        "description": "Password for authentication"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "title": "Overwrite",
                        "description": "Overwrite existing data",
                        "default": false
                    },
                    "handle_external_deps": {
                        "type": "string",
                        "title": "Handle External Deps",
                        "description": "How to handle external dependencies: 'prune', 'stitch', or 'defer'",
                        "default": "prune"
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "username",
                    "password"
                ],
                "title": "Body_restore_backup_admin_restore_post"
            },
            "Body_set_api_key_admin_keys__provider__post": {
                "properties": {
                    "api_key": {
                        "type": "string",
                        "title": "Api Key",
                        "description": "API key to store"
                    }
                },
                "type": "object",
                "required": [
                    "api_key"
                ],
                "title": "Body_set_api_key_admin_keys__provider__post"
            },
            "CategoryScoresResponse": {
                "properties": {
                    "relationship_type": {
                        "type": "string",
                        "title": "Relationship Type"
                    },
                    "category": {
                        "type": "string",
                        "title": "Category"
                    },
                    "confidence": {
                        "type": "number",
                        "title": "Confidence"
                    },
                    "scores": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "type": "object",
                        "title": "Scores"
                    },
                    "ambiguous": {
                        "type": "boolean",
                        "title": "Ambiguous"
                    },
                    "runner_up_category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Runner Up Category"
                    },
                    "runner_up_score": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Runner Up Score"
                    }
                },
                "type": "object",
                "required": [
                    "relationship_type",
                    "category",
                    "confidence",
                    "scores",
                    "ambiguous"
                ],
                "title": "CategoryScoresResponse",
                "description": "Category similarity scores for a relationship type"
            },
            "ConceptDetailsResponse": {
                "properties": {
                    "concept_id": {
                        "type": "string",
                        "title": "Concept Id",
                        "description": "Unique concept identifier"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "Human-readable concept label"
                    },
                    "search_terms": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Search Terms",
                        "description": "Alternative search terms for this concept"
                    },
                    "embedding": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "number"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Embedding",
                        "description": "Vector embedding for semantic similarity (1536 dimensions)"
                    },
                    "documents": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Documents",
                        "description": "Documents where concept appears"
                    },
                    "instances": {
                        "items": {
                            "$ref": "#/components/schemas/ConceptInstance"
                        },
                        "type": "array",
                        "title": "Instances",
                        "description": "Evidence instances (quotes from text)"
                    },
                    "relationships": {
                        "items": {
                            "$ref": "#/components/schemas/ConceptRelationship"
                        },
                        "type": "array",
                        "title": "Relationships",
                        "description": "Outgoing relationships to other concepts"
                    },
                    "grounding_strength": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grounding Strength",
                        "description": "Grounding strength (-1.0 to 1.0) based on incoming relationship semantics (ADR-044)"
                    }
                },
                "type": "object",
                "required": [
                    "concept_id",
                    "label",
                    "search_terms",
                    "documents",
                    "instances",
                    "relationships"
                ],
                "title": "ConceptDetailsResponse",
                "description": "Complete concept information with evidence and relationships.\n\nIncludes all text instances where concept appears and all semantic relationships\nconnecting it to other concepts in the graph."
            },
            "ConceptInstance": {
                "properties": {
                    "quote": {
                        "type": "string",
                        "title": "Quote",
                        "description": "Quoted text from source"
                    },
                    "document": {
                        "type": "string",
                        "title": "Document",
                        "description": "Source document name"
                    },
                    "paragraph": {
                        "type": "integer",
                        "title": "Paragraph",
                        "description": "Paragraph number in document"
                    },
                    "source_id": {
                        "type": "string",
                        "title": "Source Id",
                        "description": "Unique source identifier"
                    },
                    "full_text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Full Text",
                        "description": "Full chunk text that was processed (for grounding)"
                    }
                },
                "type": "object",
                "required": [
                    "quote",
                    "document",
                    "paragraph",
                    "source_id"
                ],
                "title": "ConceptInstance",
                "description": "Evidence instance showing where concept appears in source text.\n\nEach instance is a quoted text snippet from a specific document and paragraph.\nIncludes the full chunk text for grounding and context."
            },
            "ConceptRelationship": {
                "properties": {
                    "to_id": {
                        "type": "string",
                        "title": "To Id",
                        "description": "Target concept ID"
                    },
                    "to_label": {
                        "type": "string",
                        "title": "To Label",
                        "description": "Target concept label"
                    },
                    "rel_type": {
                        "type": "string",
                        "title": "Rel Type",
                        "description": "Relationship type (e.g., IMPLIES, SUPPORTS)"
                    },
                    "confidence": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Confidence",
                        "description": "Confidence score (0.0-1.0) if available"
                    }
                },
                "type": "object",
                "required": [
                    "to_id",
                    "to_label",
                    "rel_type"
                ],
                "title": "ConceptRelationship",
                "description": "Semantic relationship connecting two concepts.\n\nRelationship types include: IMPLIES, SUPPORTS, CONTRADICTS, RESULTS_FROM, ENABLES, etc."
            },
            "ConceptSearchResult": {
                "properties": {
                    "concept_id": {
                        "type": "string",
                        "title": "Concept Id",
                        "description": "Unique concept identifier"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "Human-readable concept label"
                    },
                    "score": {
                        "type": "number",
                        "title": "Score",
                        "description": "Similarity score (0.0-1.0)"
                    },
                    "documents": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Documents",
                        "description": "Documents where concept appears"
                    },
                    "evidence_count": {
                        "type": "integer",
                        "title": "Evidence Count",
                        "description": "Number of evidence instances"
                    },
                    "grounding_strength": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grounding Strength",
                        "description": "Grounding strength (-1.0 to 1.0) if requested (ADR-044)"
                    },
                    "sample_evidence": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ConceptInstance"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sample Evidence",
                        "description": "Sample evidence instances (quotes from source text) when include_evidence=true"
                    }
                },
                "type": "object",
                "required": [
                    "concept_id",
                    "label",
                    "score",
                    "documents",
                    "evidence_count"
                ],
                "title": "ConceptSearchResult",
                "description": "Single concept search result with similarity score and evidence"
            },
            "ConfigurationStatus": {
                "properties": {
                    "env_exists": {
                        "type": "boolean",
                        "title": "Env Exists"
                    },
                    "anthropic_key_configured": {
                        "type": "boolean",
                        "title": "Anthropic Key Configured"
                    },
                    "openai_key_configured": {
                        "type": "boolean",
                        "title": "Openai Key Configured"
                    }
                },
                "type": "object",
                "required": [
                    "env_exists",
                    "anthropic_key_configured",
                    "openai_key_configured"
                ],
                "title": "ConfigurationStatus",
                "description": "Configuration file status"
            },
            "ConnectionPath": {
                "properties": {
                    "nodes": {
                        "items": {
                            "$ref": "#/components/schemas/PathNode"
                        },
                        "type": "array",
                        "title": "Nodes",
                        "description": "Ordered list of concepts in path"
                    },
                    "relationships": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Relationships",
                        "description": "Ordered list of relationship types (e.g., IMPLIES, ENABLES)"
                    },
                    "hops": {
                        "type": "integer",
                        "title": "Hops",
                        "description": "Path length (number of relationships)"
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "relationships",
                    "hops"
                ],
                "title": "ConnectionPath",
                "description": "Single path connecting two concepts through relationships.\n\nShows the sequence of nodes and relationship types traversed."
            },
            "ConsolidateVocabularyRequest": {
                "properties": {
                    "target_size": {
                        "type": "integer",
                        "maximum": 200.0,
                        "minimum": 30.0,
                        "title": "Target Size",
                        "description": "Target vocabulary size",
                        "default": 90
                    },
                    "batch_size": {
                        "type": "integer",
                        "maximum": 20.0,
                        "minimum": 1.0,
                        "title": "Batch Size",
                        "description": "Number of candidates per iteration (usually 1)",
                        "default": 1
                    },
                    "auto_execute_threshold": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Auto Execute Threshold",
                        "description": "Auto-execute merges above this similarity",
                        "default": 0.9
                    },
                    "dry_run": {
                        "type": "boolean",
                        "title": "Dry Run",
                        "description": "Evaluate candidates without executing merges",
                        "default": false
                    }
                },
                "type": "object",
                "title": "ConsolidateVocabularyRequest",
                "description": "Request to run AITL vocabulary consolidation"
            },
            "ConsolidateVocabularyResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "initial_size": {
                        "type": "integer",
                        "title": "Initial Size"
                    },
                    "final_size": {
                        "type": "integer",
                        "title": "Final Size"
                    },
                    "size_reduction": {
                        "type": "integer",
                        "title": "Size Reduction"
                    },
                    "auto_executed": {
                        "items": {
                            "$ref": "#/components/schemas/MergeResultInfo"
                        },
                        "type": "array",
                        "title": "Auto Executed"
                    },
                    "needs_review": {
                        "items": {
                            "$ref": "#/components/schemas/ReviewInfo"
                        },
                        "type": "array",
                        "title": "Needs Review"
                    },
                    "rejected": {
                        "items": {
                            "$ref": "#/components/schemas/RejectionInfo"
                        },
                        "type": "array",
                        "title": "Rejected"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "initial_size",
                    "final_size",
                    "size_reduction",
                    "auto_executed",
                    "needs_review",
                    "rejected",
                    "message"
                ],
                "title": "ConsolidateVocabularyResponse",
                "description": "Result of AITL vocabulary consolidation"
            },
            "CypherNode": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "Node identifier (concept_id)"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "Node label/name"
                    },
                    "properties": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Properties",
                        "description": "All node properties"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "label"
                ],
                "title": "CypherNode",
                "description": "Node returned from Cypher query"
            },
            "CypherQueryRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "minLength": 1,
                        "title": "Query",
                        "description": "Raw openCypher query to execute"
                    },
                    "limit": {
                        "anyOf": [
                            {
                                "type": "integer",
                                "maximum": 1000.0,
                                "minimum": 1.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Limit",
                        "description": "Optional result limit (applied if query doesn't have LIMIT)"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "CypherQueryRequest",
                "description": "Request to execute a raw openCypher query.\n\nAllows direct execution of openCypher queries against the Apache AGE graph.\nReturns nodes and relationships in a format suitable for visualization."
            },
            "CypherQueryResponse": {
                "properties": {
                    "nodes": {
                        "items": {
                            "$ref": "#/components/schemas/CypherNode"
                        },
                        "type": "array",
                        "title": "Nodes",
                        "description": "Nodes returned by query"
                    },
                    "relationships": {
                        "items": {
                            "$ref": "#/components/schemas/CypherRelationship"
                        },
                        "type": "array",
                        "title": "Relationships",
                        "description": "Relationships returned by query"
                    },
                    "execution_time_ms": {
                        "type": "number",
                        "title": "Execution Time Ms",
                        "description": "Query execution time in milliseconds"
                    },
                    "row_count": {
                        "type": "integer",
                        "title": "Row Count",
                        "description": "Number of rows returned"
                    },
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "The executed query"
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "relationships",
                    "execution_time_ms",
                    "row_count",
                    "query"
                ],
                "title": "CypherQueryResponse",
                "description": "Response from executing raw openCypher query"
            },
            "CypherRelationship": {
                "properties": {
                    "from_id": {
                        "type": "string",
                        "title": "From Id",
                        "description": "Source node ID"
                    },
                    "to_id": {
                        "type": "string",
                        "title": "To Id",
                        "description": "Target node ID"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "Relationship type"
                    },
                    "properties": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Properties",
                        "description": "Relationship properties"
                    }
                },
                "type": "object",
                "required": [
                    "from_id",
                    "to_id",
                    "type"
                ],
                "title": "CypherRelationship",
                "description": "Relationship/edge returned from Cypher query"
            },
            "DatabaseConnection": {
                "properties": {
                    "connected": {
                        "type": "boolean",
                        "title": "Connected"
                    },
                    "uri": {
                        "type": "string",
                        "title": "Uri"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "connected",
                    "uri"
                ],
                "title": "DatabaseConnection",
                "description": "Database connection status"
            },
            "DatabaseHealthResponse": {
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "responsive": {
                        "type": "boolean",
                        "title": "Responsive"
                    },
                    "checks": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Checks"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "responsive",
                    "checks"
                ],
                "title": "DatabaseHealthResponse",
                "description": "Database health check"
            },
            "DatabaseInfoResponse": {
                "properties": {
                    "uri": {
                        "type": "string",
                        "title": "Uri"
                    },
                    "user": {
                        "type": "string",
                        "title": "User"
                    },
                    "connected": {
                        "type": "boolean",
                        "title": "Connected"
                    },
                    "version": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Version"
                    },
                    "edition": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edition"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "uri",
                    "user",
                    "connected"
                ],
                "title": "DatabaseInfoResponse",
                "description": "Database connection information"
            },
            "DatabaseStats": {
                "properties": {
                    "concepts": {
                        "type": "integer",
                        "title": "Concepts",
                        "default": 0
                    },
                    "sources": {
                        "type": "integer",
                        "title": "Sources",
                        "default": 0
                    },
                    "instances": {
                        "type": "integer",
                        "title": "Instances",
                        "default": 0
                    },
                    "relationships": {
                        "type": "integer",
                        "title": "Relationships",
                        "default": 0
                    }
                },
                "type": "object",
                "title": "DatabaseStats",
                "description": "Database statistics"
            },
            "DatabaseStatsResponse": {
                "properties": {
                    "nodes": {
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "type": "object",
                        "title": "Nodes"
                    },
                    "relationships": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Relationships"
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "relationships"
                ],
                "title": "DatabaseStatsResponse",
                "description": "Database statistics"
            },
            "DockerStatus": {
                "properties": {
                    "running": {
                        "type": "boolean",
                        "title": "Running"
                    },
                    "container_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Container Name"
                    },
                    "status": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Status"
                    },
                    "ports": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ports"
                    }
                },
                "type": "object",
                "required": [
                    "running"
                ],
                "title": "DockerStatus",
                "description": "Docker container status"
            },
            "DuplicateJobResponse": {
                "properties": {
                    "duplicate": {
                        "type": "boolean",
                        "title": "Duplicate",
                        "description": "Always true for this response type",
                        "default": true
                    },
                    "existing_job_id": {
                        "type": "string",
                        "title": "Existing Job Id",
                        "description": "ID of existing job"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "Status of existing job"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At",
                        "description": "When existing job was created"
                    },
                    "completed_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Completed At",
                        "description": "When existing job completed"
                    },
                    "result": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JobResult"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Result if completed"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "description": "User-friendly message"
                    },
                    "use_force": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Use Force",
                        "description": "How to override duplicate detection"
                    }
                },
                "type": "object",
                "required": [
                    "existing_job_id",
                    "status",
                    "created_at",
                    "message"
                ],
                "title": "DuplicateJobResponse",
                "description": "Response when duplicate content detected"
            },
            "EdgeTypeInfo": {
                "properties": {
                    "relationship_type": {
                        "type": "string",
                        "title": "Relationship Type"
                    },
                    "category": {
                        "type": "string",
                        "title": "Category"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "is_builtin": {
                        "type": "boolean",
                        "title": "Is Builtin"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Is Active"
                    },
                    "added_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Added By"
                    },
                    "added_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Added At"
                    },
                    "usage_count": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Usage Count"
                    },
                    "edge_count": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edge Count"
                    },
                    "avg_traversal": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Avg Traversal"
                    },
                    "last_used": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Used"
                    },
                    "value_score": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Value Score"
                    },
                    "category_source": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category Source"
                    },
                    "category_confidence": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category Confidence"
                    },
                    "category_scores": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "type": "number"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category Scores"
                    },
                    "category_ambiguous": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category Ambiguous"
                    },
                    "direction_semantics": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Direction Semantics"
                    }
                },
                "type": "object",
                "required": [
                    "relationship_type",
                    "category",
                    "is_builtin",
                    "is_active"
                ],
                "title": "EdgeTypeInfo",
                "description": "Information about an edge type"
            },
            "EdgeTypeListResponse": {
                "properties": {
                    "total": {
                        "type": "integer",
                        "title": "Total"
                    },
                    "active": {
                        "type": "integer",
                        "title": "Active"
                    },
                    "builtin": {
                        "type": "integer",
                        "title": "Builtin"
                    },
                    "custom": {
                        "type": "integer",
                        "title": "Custom"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/components/schemas/EdgeTypeInfo"
                        },
                        "type": "array",
                        "title": "Types"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "active",
                    "builtin",
                    "custom",
                    "types"
                ],
                "title": "EdgeTypeListResponse",
                "description": "List of edge types with statistics"
            },
            "EmbeddingConfigDetail": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "provider": {
                        "type": "string",
                        "title": "Provider"
                    },
                    "model_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Name"
                    },
                    "embedding_dimensions": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Embedding Dimensions"
                    },
                    "precision": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Precision"
                    },
                    "max_memory_mb": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Memory Mb"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads"
                    },
                    "device": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Device"
                    },
                    "batch_size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Size"
                    },
                    "max_seq_length": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Seq Length"
                    },
                    "normalize_embeddings": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Normalize Embeddings"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "updated_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated By"
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "provider",
                    "created_at",
                    "updated_at",
                    "active"
                ],
                "title": "EmbeddingConfigDetail",
                "description": "Full embedding configuration details (admin only).\n\nIncludes all configuration parameters and metadata."
            },
            "EmbeddingConfigResponse": {
                "properties": {
                    "provider": {
                        "type": "string",
                        "title": "Provider",
                        "description": "Embedding provider: 'openai', 'local', or 'none'"
                    },
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model",
                        "description": "Model name (e.g., 'nomic-ai/nomic-embed-text-v1.5')"
                    },
                    "dimensions": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Dimensions",
                        "description": "Embedding vector dimensions"
                    },
                    "precision": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Precision",
                        "description": "Precision: 'float16' or 'float32'"
                    },
                    "config_id": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Config Id",
                        "description": "Database config ID"
                    },
                    "supports_browser": {
                        "type": "boolean",
                        "title": "Supports Browser",
                        "description": "Whether this model is available in transformers.js"
                    },
                    "resource_allocation": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ResourceAllocation"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Resource settings (local only)"
                    }
                },
                "type": "object",
                "required": [
                    "provider",
                    "supports_browser"
                ],
                "title": "EmbeddingConfigResponse",
                "description": "Public embedding configuration response.\n\nReturns summary info suitable for clients to determine if they can use\nbrowser-side embeddings."
            },
            "ExtractionConfigDetail": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "provider": {
                        "type": "string",
                        "title": "Provider"
                    },
                    "model_name": {
                        "type": "string",
                        "title": "Model Name"
                    },
                    "supports_vision": {
                        "type": "boolean",
                        "title": "Supports Vision"
                    },
                    "supports_json_mode": {
                        "type": "boolean",
                        "title": "Supports Json Mode"
                    },
                    "max_tokens": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Tokens"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updated At"
                    },
                    "updated_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated By"
                    },
                    "active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "base_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Url"
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature"
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P"
                    },
                    "gpu_layers": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gpu Layers"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads"
                    },
                    "thinking_mode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thinking Mode"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "provider",
                    "model_name",
                    "supports_vision",
                    "supports_json_mode",
                    "created_at",
                    "updated_at",
                    "active"
                ],
                "title": "ExtractionConfigDetail",
                "description": "Full AI extraction configuration details (admin only).\n\nIncludes all configuration parameters and metadata."
            },
            "ExtractionConfigResponse": {
                "properties": {
                    "provider": {
                        "type": "string",
                        "title": "Provider",
                        "description": "AI provider: 'openai', 'anthropic', 'ollama', or 'none'"
                    },
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model",
                        "description": "Model name (e.g., 'gpt-4o', 'claude-sonnet-4-20250514', 'mistral:7b-instruct')"
                    },
                    "supports_vision": {
                        "type": "boolean",
                        "title": "Supports Vision",
                        "description": "Whether the model supports vision/image inputs"
                    },
                    "supports_json_mode": {
                        "type": "boolean",
                        "title": "Supports Json Mode",
                        "description": "Whether the model supports JSON mode"
                    },
                    "max_tokens": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Tokens",
                        "description": "Maximum token limit"
                    },
                    "config_id": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Config Id",
                        "description": "Database config ID"
                    },
                    "base_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Url",
                        "description": "Base URL for local providers (e.g., http://localhost:11434)"
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature",
                        "description": "Sampling temperature (0.0-1.0)"
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P",
                        "description": "Nucleus sampling threshold (0.0-1.0)"
                    },
                    "gpu_layers": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gpu Layers",
                        "description": "GPU layers: -1=auto, 0=CPU only, >0=specific count"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads",
                        "description": "CPU threads for inference"
                    },
                    "thinking_mode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thinking Mode",
                        "description": "Thinking mode: 'off', 'low', 'medium', 'high' (Ollama 0.12.x+)"
                    }
                },
                "type": "object",
                "required": [
                    "provider",
                    "supports_vision",
                    "supports_json_mode"
                ],
                "title": "ExtractionConfigResponse",
                "description": "Public AI extraction configuration response.\n\nReturns summary info suitable for clients to understand which AI provider\nis active and its capabilities."
            },
            "FindConnectionBySearchRequest": {
                "properties": {
                    "from_query": {
                        "type": "string",
                        "minLength": 1,
                        "title": "From Query",
                        "description": "Semantic phrase for starting concept (e.g., 'licensing issues' not 'licensing')"
                    },
                    "to_query": {
                        "type": "string",
                        "minLength": 1,
                        "title": "To Query",
                        "description": "Semantic phrase for target concept (use specific 2-3 word phrases)"
                    },
                    "max_hops": {
                        "type": "integer",
                        "maximum": 10.0,
                        "minimum": 1.0,
                        "title": "Max Hops",
                        "description": "Maximum path length to search",
                        "default": 5
                    },
                    "threshold": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Threshold",
                        "description": "Minimum similarity threshold (default 50% - lower for broader matches)",
                        "default": 0.5
                    },
                    "include_evidence": {
                        "type": "boolean",
                        "title": "Include Evidence",
                        "description": "Include sample evidence instances for each concept in paths",
                        "default": false
                    },
                    "include_grounding": {
                        "type": "boolean",
                        "title": "Include Grounding",
                        "description": "Include grounding strength for each concept in paths (ADR-044)",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "from_query",
                    "to_query"
                ],
                "title": "FindConnectionBySearchRequest",
                "description": "Request to find path between concepts using semantic phrase matching.\n\nUses vector embeddings to match query phrases to existing concepts, then finds paths.\nGeneric single words may not match well - use specific 2-3 word phrases for best results."
            },
            "FindConnectionBySearchResponse": {
                "properties": {
                    "from_query": {
                        "type": "string",
                        "title": "From Query",
                        "description": "Original from query phrase"
                    },
                    "to_query": {
                        "type": "string",
                        "title": "To Query",
                        "description": "Original to query phrase"
                    },
                    "from_concept": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PathNode"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Top matching concept for from_query"
                    },
                    "to_concept": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PathNode"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Top matching concept for to_query"
                    },
                    "from_similarity": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From Similarity",
                        "description": "Similarity score of from match (0.0-1.0)"
                    },
                    "to_similarity": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To Similarity",
                        "description": "Similarity score of to match (0.0-1.0)"
                    },
                    "from_suggested_threshold": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From Suggested Threshold",
                        "description": "Suggested threshold if from query had no matches"
                    },
                    "to_suggested_threshold": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To Suggested Threshold",
                        "description": "Suggested threshold if to query had no matches"
                    },
                    "from_near_misses": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From Near Misses",
                        "description": "Count of near-miss concepts for from query below threshold"
                    },
                    "to_near_misses": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To Near Misses",
                        "description": "Count of near-miss concepts for to query below threshold"
                    },
                    "max_hops": {
                        "type": "integer",
                        "title": "Max Hops",
                        "description": "Maximum path length searched"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count",
                        "description": "Number of paths found"
                    },
                    "paths": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectionPath"
                        },
                        "type": "array",
                        "title": "Paths",
                        "description": "Discovered paths between matched concepts"
                    }
                },
                "type": "object",
                "required": [
                    "from_query",
                    "to_query",
                    "max_hops",
                    "count",
                    "paths"
                ],
                "title": "FindConnectionBySearchResponse",
                "description": "Connection paths response with semantic phrase matching details.\n\nShows which concepts matched the search phrases and provides threshold hints\nif matches were weak or missing. Includes similarity scores to help tune queries."
            },
            "FindConnectionRequest": {
                "properties": {
                    "from_id": {
                        "type": "string",
                        "title": "From Id",
                        "description": "Starting concept ID (exact match required)"
                    },
                    "to_id": {
                        "type": "string",
                        "title": "To Id",
                        "description": "Target concept ID (exact match required)"
                    },
                    "max_hops": {
                        "type": "integer",
                        "maximum": 10.0,
                        "minimum": 1.0,
                        "title": "Max Hops",
                        "description": "Maximum path length to search (1-10 hops)",
                        "default": 5
                    },
                    "include_evidence": {
                        "type": "boolean",
                        "title": "Include Evidence",
                        "description": "Include sample evidence instances for each concept in paths",
                        "default": false
                    },
                    "include_grounding": {
                        "type": "boolean",
                        "title": "Include Grounding",
                        "description": "Include grounding strength for each concept in paths (ADR-044)",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "from_id",
                    "to_id"
                ],
                "title": "FindConnectionRequest",
                "description": "Request to find shortest paths between two concepts using exact IDs.\n\nUses graph traversal to find up to 5 shortest paths connecting the concepts.\nFor phrase-based search, use /query/connect-by-search instead."
            },
            "FindConnectionResponse": {
                "properties": {
                    "from_id": {
                        "type": "string",
                        "title": "From Id",
                        "description": "Starting concept ID"
                    },
                    "to_id": {
                        "type": "string",
                        "title": "To Id",
                        "description": "Target concept ID"
                    },
                    "max_hops": {
                        "type": "integer",
                        "title": "Max Hops",
                        "description": "Maximum path length searched"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count",
                        "description": "Number of paths found"
                    },
                    "paths": {
                        "items": {
                            "$ref": "#/components/schemas/ConnectionPath"
                        },
                        "type": "array",
                        "title": "Paths",
                        "description": "Discovered paths (up to 5)"
                    }
                },
                "type": "object",
                "required": [
                    "from_id",
                    "to_id",
                    "max_hops",
                    "count",
                    "paths"
                ],
                "title": "FindConnectionResponse",
                "description": "Connection paths between two concepts.\n\nReturns up to 5 shortest paths found within max_hops limit."
            },
            "GenerateEmbeddingsRequest": {
                "properties": {
                    "force_regenerate": {
                        "type": "boolean",
                        "title": "Force Regenerate",
                        "default": false
                    },
                    "only_missing": {
                        "type": "boolean",
                        "title": "Only Missing",
                        "default": true
                    }
                },
                "type": "object",
                "title": "GenerateEmbeddingsRequest",
                "description": "Request to generate vocabulary embeddings"
            },
            "GenerateEmbeddingsResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "generated": {
                        "type": "integer",
                        "title": "Generated"
                    },
                    "skipped": {
                        "type": "integer",
                        "title": "Skipped"
                    },
                    "failed": {
                        "type": "integer",
                        "title": "Failed"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "generated",
                    "skipped",
                    "failed",
                    "message"
                ],
                "title": "GenerateEmbeddingsResponse",
                "description": "Result of generating vocabulary embeddings"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "JobCost": {
                "properties": {
                    "extraction": {
                        "type": "string",
                        "title": "Extraction",
                        "description": "Extraction cost (formatted)"
                    },
                    "embeddings": {
                        "type": "string",
                        "title": "Embeddings",
                        "description": "Embeddings cost (formatted)"
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "Total cost (formatted)"
                    },
                    "extraction_model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Extraction Model",
                        "description": "Model used for extraction"
                    },
                    "embedding_model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Embedding Model",
                        "description": "Model used for embeddings"
                    }
                },
                "type": "object",
                "required": [
                    "extraction",
                    "embeddings",
                    "total"
                ],
                "title": "JobCost",
                "description": "Cost breakdown for ingestion job"
            },
            "JobProgress": {
                "properties": {
                    "stage": {
                        "type": "string",
                        "title": "Stage",
                        "description": "Current stage of processing"
                    },
                    "chunks_total": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chunks Total",
                        "description": "Total chunks to process"
                    },
                    "chunks_processed": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chunks Processed",
                        "description": "Chunks processed so far"
                    },
                    "percent": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Percent",
                        "description": "Percentage complete (0-100)"
                    },
                    "current_chunk": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Current Chunk",
                        "description": "Current chunk being processed"
                    },
                    "concepts_created": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Concepts Created",
                        "description": "Concepts created so far"
                    },
                    "sources_created": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sources Created",
                        "description": "Sources created so far"
                    }
                },
                "type": "object",
                "required": [
                    "stage"
                ],
                "title": "JobProgress",
                "description": "Job progress information"
            },
            "JobResult": {
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "Completion status"
                    },
                    "stats": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JobStats"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Ingestion statistics"
                    },
                    "cost": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JobCost"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Cost breakdown"
                    },
                    "ontology": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ontology",
                        "description": "Target ontology"
                    },
                    "filename": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Filename",
                        "description": "Source filename"
                    },
                    "chunks_processed": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chunks Processed",
                        "description": "Number of chunks processed"
                    },
                    "message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Message",
                        "description": "Completion message"
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ],
                "title": "JobResult",
                "description": "Job completion result"
            },
            "JobStats": {
                "properties": {
                    "chunks_processed": {
                        "type": "integer",
                        "title": "Chunks Processed",
                        "default": 0
                    },
                    "sources_created": {
                        "type": "integer",
                        "title": "Sources Created",
                        "default": 0
                    },
                    "concepts_created": {
                        "type": "integer",
                        "title": "Concepts Created",
                        "default": 0
                    },
                    "concepts_linked": {
                        "type": "integer",
                        "title": "Concepts Linked",
                        "default": 0
                    },
                    "instances_created": {
                        "type": "integer",
                        "title": "Instances Created",
                        "default": 0
                    },
                    "relationships_created": {
                        "type": "integer",
                        "title": "Relationships Created",
                        "default": 0
                    },
                    "extraction_tokens": {
                        "type": "integer",
                        "title": "Extraction Tokens",
                        "default": 0
                    },
                    "embedding_tokens": {
                        "type": "integer",
                        "title": "Embedding Tokens",
                        "default": 0
                    }
                },
                "type": "object",
                "title": "JobStats",
                "description": "Ingestion statistics"
            },
            "JobStatus": {
                "properties": {
                    "job_id": {
                        "type": "string",
                        "title": "Job Id",
                        "description": "Unique job identifier"
                    },
                    "job_type": {
                        "type": "string",
                        "title": "Job Type",
                        "description": "Type of job"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "Job status: pending|awaiting_approval|approved|queued|processing|completed|failed|cancelled"
                    },
                    "progress": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JobProgress"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Progress information"
                    },
                    "result": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/JobResult"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Result data (if completed)"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error",
                        "description": "Error message (if failed)"
                    },
                    "created_at": {
                        "type": "string",
                        "title": "Created At",
                        "description": "Job creation timestamp"
                    },
                    "started_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Started At",
                        "description": "Job start timestamp"
                    },
                    "completed_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Completed At",
                        "description": "Job completion timestamp"
                    },
                    "content_hash": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content Hash",
                        "description": "Content hash for deduplication"
                    },
                    "ontology": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ontology",
                        "description": "Target ontology"
                    },
                    "processing_mode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Processing Mode",
                        "description": "Processing mode: serial|parallel (default: serial)",
                        "default": "serial"
                    },
                    "analysis": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Analysis",
                        "description": "Pre-ingestion analysis (file stats, cost estimates)"
                    },
                    "approved_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Approved At",
                        "description": "Approval timestamp"
                    },
                    "approved_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Approved By",
                        "description": "User who approved (Phase 2)"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At",
                        "description": "Expiration timestamp for unapproved jobs"
                    }
                },
                "type": "object",
                "required": [
                    "job_id",
                    "job_type",
                    "status",
                    "created_at"
                ],
                "title": "JobStatus",
                "description": "Complete job status response"
            },
            "JobSubmitResponse": {
                "properties": {
                    "job_id": {
                        "type": "string",
                        "title": "Job Id",
                        "description": "Unique job identifier"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "Initial job status"
                    },
                    "content_hash": {
                        "type": "string",
                        "title": "Content Hash",
                        "description": "Content hash for tracking"
                    },
                    "position": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Position",
                        "description": "Position in queue"
                    },
                    "message": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Message",
                        "description": "Info message"
                    }
                },
                "type": "object",
                "required": [
                    "job_id",
                    "status",
                    "content_hash"
                ],
                "title": "JobSubmitResponse",
                "description": "Response when submitting a new job"
            },
            "ListBackupsResponse": {
                "properties": {
                    "backups": {
                        "items": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Backups"
                    },
                    "backup_dir": {
                        "type": "string",
                        "title": "Backup Dir"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "backup_dir",
                    "count"
                ],
                "title": "ListBackupsResponse",
                "description": "List available backups"
            },
            "LoginResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token",
                        "description": "JWT access token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "description": "Token type (always 'bearer')",
                        "default": "bearer"
                    },
                    "expires_in": {
                        "type": "integer",
                        "title": "Expires In",
                        "description": "Token expiration time in seconds"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserRead",
                        "description": "Authenticated user details"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "expires_in",
                    "user"
                ],
                "title": "LoginResponse",
                "description": "Login response with user details",
                "examples": [
                    {
                        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "expires_in": 3600,
                        "token_type": "bearer",
                        "user": {
                            "created_at": "2025-10-11T12:00:00Z",
                            "disabled": false,
                            "id": 42,
                            "last_login": "2025-10-11T15:30:00Z",
                            "role": "curator",
                            "username": "alice"
                        }
                    }
                ]
            },
            "MergeEdgeTypesRequest": {
                "properties": {
                    "deprecated_type": {
                        "type": "string",
                        "title": "Deprecated Type"
                    },
                    "target_type": {
                        "type": "string",
                        "title": "Target Type"
                    },
                    "performed_by": {
                        "type": "string",
                        "title": "Performed By"
                    },
                    "reason": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    }
                },
                "type": "object",
                "required": [
                    "deprecated_type",
                    "target_type",
                    "performed_by"
                ],
                "title": "MergeEdgeTypesRequest",
                "description": "Request to merge edge types"
            },
            "MergeEdgeTypesResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "deprecated_type": {
                        "type": "string",
                        "title": "Deprecated Type"
                    },
                    "target_type": {
                        "type": "string",
                        "title": "Target Type"
                    },
                    "edges_updated": {
                        "type": "integer",
                        "title": "Edges Updated"
                    },
                    "vocab_updated": {
                        "type": "integer",
                        "title": "Vocab Updated"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "deprecated_type",
                    "target_type",
                    "edges_updated",
                    "vocab_updated",
                    "message"
                ],
                "title": "MergeEdgeTypesResponse",
                "description": "Result of merging edge types"
            },
            "MergeResultInfo": {
                "properties": {
                    "deprecated": {
                        "type": "string",
                        "title": "Deprecated"
                    },
                    "target": {
                        "type": "string",
                        "title": "Target"
                    },
                    "similarity": {
                        "type": "number",
                        "title": "Similarity"
                    },
                    "reasoning": {
                        "type": "string",
                        "title": "Reasoning"
                    },
                    "blended_description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Blended Description"
                    },
                    "edges_affected": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edges Affected"
                    },
                    "edges_updated": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edges Updated"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "deprecated",
                    "target",
                    "similarity",
                    "reasoning"
                ],
                "title": "MergeResultInfo",
                "description": "Information about a single merge result"
            },
            "OntologyDeleteResponse": {
                "properties": {
                    "ontology": {
                        "type": "string",
                        "title": "Ontology"
                    },
                    "deleted": {
                        "type": "boolean",
                        "title": "Deleted"
                    },
                    "sources_deleted": {
                        "type": "integer",
                        "title": "Sources Deleted"
                    },
                    "orphaned_concepts_deleted": {
                        "type": "integer",
                        "title": "Orphaned Concepts Deleted"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "ontology",
                    "deleted",
                    "sources_deleted",
                    "orphaned_concepts_deleted"
                ],
                "title": "OntologyDeleteResponse",
                "description": "Delete ontology response"
            },
            "OntologyFileInfo": {
                "properties": {
                    "file_path": {
                        "type": "string",
                        "title": "File Path"
                    },
                    "chunk_count": {
                        "type": "integer",
                        "title": "Chunk Count"
                    },
                    "concept_count": {
                        "type": "integer",
                        "title": "Concept Count"
                    }
                },
                "type": "object",
                "required": [
                    "file_path",
                    "chunk_count",
                    "concept_count"
                ],
                "title": "OntologyFileInfo",
                "description": "File within an ontology"
            },
            "OntologyFilesResponse": {
                "properties": {
                    "ontology": {
                        "type": "string",
                        "title": "Ontology"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    },
                    "files": {
                        "items": {
                            "$ref": "#/components/schemas/OntologyFileInfo"
                        },
                        "type": "array",
                        "title": "Files"
                    }
                },
                "type": "object",
                "required": [
                    "ontology",
                    "count",
                    "files"
                ],
                "title": "OntologyFilesResponse",
                "description": "Files in an ontology"
            },
            "OntologyInfoResponse": {
                "properties": {
                    "ontology": {
                        "type": "string",
                        "title": "Ontology"
                    },
                    "statistics": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Statistics"
                    },
                    "files": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Files"
                    }
                },
                "type": "object",
                "required": [
                    "ontology",
                    "statistics",
                    "files"
                ],
                "title": "OntologyInfoResponse",
                "description": "Detailed ontology information"
            },
            "OntologyItem": {
                "properties": {
                    "ontology": {
                        "type": "string",
                        "title": "Ontology"
                    },
                    "source_count": {
                        "type": "integer",
                        "title": "Source Count"
                    },
                    "file_count": {
                        "type": "integer",
                        "title": "File Count"
                    },
                    "concept_count": {
                        "type": "integer",
                        "title": "Concept Count"
                    }
                },
                "type": "object",
                "required": [
                    "ontology",
                    "source_count",
                    "file_count",
                    "concept_count"
                ],
                "title": "OntologyItem",
                "description": "Single ontology in the list"
            },
            "OntologyListResponse": {
                "properties": {
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    },
                    "ontologies": {
                        "items": {
                            "$ref": "#/components/schemas/OntologyItem"
                        },
                        "type": "array",
                        "title": "Ontologies"
                    }
                },
                "type": "object",
                "required": [
                    "count",
                    "ontologies"
                ],
                "title": "OntologyListResponse",
                "description": "List of all ontologies"
            },
            "OntologyRenameRequest": {
                "properties": {
                    "new_name": {
                        "type": "string",
                        "minLength": 1,
                        "title": "New Name",
                        "description": "New ontology name"
                    }
                },
                "type": "object",
                "required": [
                    "new_name"
                ],
                "title": "OntologyRenameRequest",
                "description": "Request to rename an ontology"
            },
            "OntologyRenameResponse": {
                "properties": {
                    "old_name": {
                        "type": "string",
                        "title": "Old Name"
                    },
                    "new_name": {
                        "type": "string",
                        "title": "New Name"
                    },
                    "sources_updated": {
                        "type": "integer",
                        "title": "Sources Updated"
                    },
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "error": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Error"
                    }
                },
                "type": "object",
                "required": [
                    "old_name",
                    "new_name",
                    "sources_updated",
                    "success"
                ],
                "title": "OntologyRenameResponse",
                "description": "Rename ontology response"
            },
            "PathNode": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "Concept ID"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "Concept label"
                    },
                    "grounding_strength": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grounding Strength",
                        "description": "Grounding strength (-1.0 to 1.0) if requested (ADR-044)"
                    },
                    "sample_evidence": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ConceptInstance"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sample Evidence",
                        "description": "Sample evidence instances when include_evidence=true"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "label"
                ],
                "title": "PathNode",
                "description": "Node in a connection path"
            },
            "PermissionCheckRequest": {
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "title": "User Id"
                    },
                    "resource_type": {
                        "type": "string",
                        "title": "Resource Type"
                    },
                    "action": {
                        "type": "string",
                        "title": "Action"
                    },
                    "resource_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Resource Id"
                    },
                    "resource_context": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Resource Context"
                    }
                },
                "type": "object",
                "required": [
                    "user_id",
                    "resource_type",
                    "action"
                ],
                "title": "PermissionCheckRequest"
            },
            "PermissionCheckResponse": {
                "properties": {
                    "allowed": {
                        "type": "boolean",
                        "title": "Allowed"
                    },
                    "reason": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    }
                },
                "type": "object",
                "required": [
                    "allowed"
                ],
                "title": "PermissionCheckResponse"
            },
            "PermissionCreate": {
                "properties": {
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    },
                    "resource_type": {
                        "type": "string",
                        "title": "Resource Type"
                    },
                    "action": {
                        "type": "string",
                        "title": "Action"
                    },
                    "scope_type": {
                        "type": "string",
                        "title": "Scope Type",
                        "default": "global"
                    },
                    "scope_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Id"
                    },
                    "scope_filter": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Filter"
                    },
                    "granted": {
                        "type": "boolean",
                        "title": "Granted",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "role_name",
                    "resource_type",
                    "action"
                ],
                "title": "PermissionCreate"
            },
            "PermissionRead": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    },
                    "resource_type": {
                        "type": "string",
                        "title": "Resource Type"
                    },
                    "action": {
                        "type": "string",
                        "title": "Action"
                    },
                    "scope_type": {
                        "type": "string",
                        "title": "Scope Type"
                    },
                    "scope_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Id"
                    },
                    "scope_filter": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Filter"
                    },
                    "granted": {
                        "type": "boolean",
                        "title": "Granted"
                    },
                    "inherited_from": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Inherited From"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "role_name",
                    "resource_type",
                    "action",
                    "scope_type",
                    "scope_id",
                    "scope_filter",
                    "granted",
                    "inherited_from",
                    "created_at",
                    "created_by"
                ],
                "title": "PermissionRead"
            },
            "PythonEnvironment": {
                "properties": {
                    "venv_exists": {
                        "type": "boolean",
                        "title": "Venv Exists"
                    },
                    "python_version": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Python Version"
                    }
                },
                "type": "object",
                "required": [
                    "venv_exists"
                ],
                "title": "PythonEnvironment",
                "description": "Python environment status"
            },
            "RefreshCategoriesRequest": {
                "properties": {
                    "only_computed": {
                        "type": "boolean",
                        "title": "Only Computed",
                        "description": "Only refresh types with category_source='computed'",
                        "default": true
                    }
                },
                "type": "object",
                "title": "RefreshCategoriesRequest",
                "description": "Request to refresh category assignments"
            },
            "RefreshCategoriesResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "refreshed_count": {
                        "type": "integer",
                        "title": "Refreshed Count"
                    },
                    "skipped_count": {
                        "type": "integer",
                        "title": "Skipped Count"
                    },
                    "failed_count": {
                        "type": "integer",
                        "title": "Failed Count"
                    },
                    "assignments": {
                        "items": {
                            "$ref": "#/components/schemas/CategoryScoresResponse"
                        },
                        "type": "array",
                        "title": "Assignments"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "refreshed_count",
                    "skipped_count",
                    "failed_count",
                    "assignments",
                    "message"
                ],
                "title": "RefreshCategoriesResponse",
                "description": "Result of category refresh operation"
            },
            "RejectionInfo": {
                "properties": {
                    "type1": {
                        "type": "string",
                        "title": "Type1"
                    },
                    "type2": {
                        "type": "string",
                        "title": "Type2"
                    },
                    "reasoning": {
                        "type": "string",
                        "title": "Reasoning"
                    }
                },
                "type": "object",
                "required": [
                    "type1",
                    "type2",
                    "reasoning"
                ],
                "title": "RejectionInfo",
                "description": "Information about a rejected merge"
            },
            "RelatedConcept": {
                "properties": {
                    "concept_id": {
                        "type": "string",
                        "title": "Concept Id",
                        "description": "Related concept ID"
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "Related concept label"
                    },
                    "distance": {
                        "type": "integer",
                        "title": "Distance",
                        "description": "Number of hops from starting concept"
                    },
                    "path_types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Path Types",
                        "description": "Relationship types traversed to reach this concept"
                    }
                },
                "type": "object",
                "required": [
                    "concept_id",
                    "label",
                    "distance",
                    "path_types"
                ],
                "title": "RelatedConcept",
                "description": "Concept found through graph traversal with distance information"
            },
            "RelatedConceptsRequest": {
                "properties": {
                    "concept_id": {
                        "type": "string",
                        "title": "Concept Id",
                        "description": "Starting concept ID"
                    },
                    "relationship_types": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Relationship Types",
                        "description": "Filter by relationship types (e.g., ['IMPLIES', 'SUPPORTS'])"
                    },
                    "max_depth": {
                        "type": "integer",
                        "maximum": 5.0,
                        "minimum": 1.0,
                        "title": "Max Depth",
                        "description": "Maximum traversal depth (1-5 hops)",
                        "default": 2
                    }
                },
                "type": "object",
                "required": [
                    "concept_id"
                ],
                "title": "RelatedConceptsRequest",
                "description": "Request to find concepts related through graph traversal.\n\nPerforms breadth-first search from a starting concept to find all connected concepts\nwithin max_depth hops. Optionally filters by specific relationship types."
            },
            "RelatedConceptsResponse": {
                "properties": {
                    "concept_id": {
                        "type": "string",
                        "title": "Concept Id",
                        "description": "Starting concept ID"
                    },
                    "max_depth": {
                        "type": "integer",
                        "title": "Max Depth",
                        "description": "Maximum depth searched"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count",
                        "description": "Number of related concepts found"
                    },
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/RelatedConcept"
                        },
                        "type": "array",
                        "title": "Results",
                        "description": "Related concepts ordered by distance"
                    }
                },
                "type": "object",
                "required": [
                    "concept_id",
                    "max_depth",
                    "count",
                    "results"
                ],
                "title": "RelatedConceptsResponse",
                "description": "Related concepts grouped by distance from starting concept.\n\nResults ordered by distance (closer concepts first)."
            },
            "ReloadEmbeddingModelResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "provider": {
                        "type": "string",
                        "title": "Provider"
                    },
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model"
                    },
                    "dimensions": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Dimensions"
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "message",
                    "provider"
                ],
                "title": "ReloadEmbeddingModelResponse",
                "description": "Response after hot reloading embedding model"
            },
            "ResetRequest": {
                "properties": {
                    "username": {
                        "type": "string",
                        "title": "Username",
                        "description": "Username for authentication"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password",
                        "description": "Password for authentication"
                    },
                    "confirm": {
                        "type": "boolean",
                        "title": "Confirm",
                        "description": "Must be true to confirm destructive operation"
                    },
                    "clear_logs": {
                        "type": "boolean",
                        "title": "Clear Logs",
                        "description": "Clear log files",
                        "default": true
                    },
                    "clear_checkpoints": {
                        "type": "boolean",
                        "title": "Clear Checkpoints",
                        "description": "Clear checkpoint files",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password",
                    "confirm"
                ],
                "title": "ResetRequest",
                "description": "Request to reset database (requires authentication)"
            },
            "ResetResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "schema_validation": {
                        "$ref": "#/components/schemas/SchemaValidation"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "warnings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Warnings",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "schema_validation",
                    "message"
                ],
                "title": "ResetResponse",
                "description": "Reset operation response"
            },
            "ResourceAllocation": {
                "properties": {
                    "max_memory_mb": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Memory Mb",
                        "description": "Maximum RAM for model (MB)"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads",
                        "description": "CPU threads for inference"
                    },
                    "device": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Device",
                        "description": "Device: cpu, cuda, or mps"
                    },
                    "batch_size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Size",
                        "description": "Batch size for generation"
                    }
                },
                "type": "object",
                "title": "ResourceAllocation",
                "description": "Resource allocation settings for local embeddings"
            },
            "ResourceCreate": {
                "properties": {
                    "resource_type": {
                        "type": "string",
                        "maxLength": 100,
                        "title": "Resource Type"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "parent_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parent Type"
                    },
                    "available_actions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "minItems": 1,
                        "title": "Available Actions"
                    },
                    "supports_scoping": {
                        "type": "boolean",
                        "title": "Supports Scoping",
                        "default": false
                    },
                    "metadata": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Metadata",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "resource_type",
                    "available_actions"
                ],
                "title": "ResourceCreate"
            },
            "ResourceRead": {
                "properties": {
                    "resource_type": {
                        "type": "string",
                        "title": "Resource Type"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "parent_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parent Type"
                    },
                    "available_actions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Available Actions"
                    },
                    "supports_scoping": {
                        "type": "boolean",
                        "title": "Supports Scoping"
                    },
                    "metadata": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Metadata"
                    },
                    "registered_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Registered At"
                    },
                    "registered_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Registered By"
                    }
                },
                "type": "object",
                "required": [
                    "resource_type",
                    "description",
                    "parent_type",
                    "available_actions",
                    "supports_scoping",
                    "metadata",
                    "registered_at",
                    "registered_by"
                ],
                "title": "ResourceRead"
            },
            "ResourceUpdate": {
                "properties": {
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "available_actions": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Available Actions"
                    },
                    "supports_scoping": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Supports Scoping"
                    },
                    "metadata": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "title": "ResourceUpdate"
            },
            "ReviewInfo": {
                "properties": {
                    "type1": {
                        "type": "string",
                        "title": "Type1"
                    },
                    "type2": {
                        "type": "string",
                        "title": "Type2"
                    },
                    "suggested_term": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Suggested Term"
                    },
                    "suggested_description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Suggested Description"
                    },
                    "similarity": {
                        "type": "number",
                        "title": "Similarity"
                    },
                    "reasoning": {
                        "type": "string",
                        "title": "Reasoning"
                    },
                    "edge_count1": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edge Count1"
                    },
                    "edge_count2": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Edge Count2"
                    }
                },
                "type": "object",
                "required": [
                    "type1",
                    "type2",
                    "similarity",
                    "reasoning"
                ],
                "title": "ReviewInfo",
                "description": "Information about a merge needing human review"
            },
            "RoleCreate": {
                "properties": {
                    "role_name": {
                        "type": "string",
                        "maxLength": 50,
                        "title": "Role Name"
                    },
                    "display_name": {
                        "type": "string",
                        "maxLength": 100,
                        "title": "Display Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "parent_role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parent Role"
                    },
                    "metadata": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Metadata",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "role_name",
                    "display_name"
                ],
                "title": "RoleCreate"
            },
            "RoleRead": {
                "properties": {
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "Display Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "is_builtin": {
                        "type": "boolean",
                        "title": "Is Builtin"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Is Active"
                    },
                    "parent_role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parent Role"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "created_by": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Created By"
                    },
                    "metadata": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "required": [
                    "role_name",
                    "display_name",
                    "description",
                    "is_builtin",
                    "is_active",
                    "parent_role",
                    "created_at",
                    "created_by",
                    "metadata"
                ],
                "title": "RoleRead"
            },
            "RoleUpdate": {
                "properties": {
                    "display_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Display Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "parent_role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parent Role"
                    },
                    "is_active": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Is Active"
                    },
                    "metadata": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "title": "RoleUpdate"
            },
            "SchemaValidation": {
                "properties": {
                    "constraints_count": {
                        "type": "integer",
                        "title": "Constraints Count"
                    },
                    "vector_index_exists": {
                        "type": "boolean",
                        "title": "Vector Index Exists"
                    },
                    "node_count": {
                        "type": "integer",
                        "title": "Node Count"
                    },
                    "schema_test_passed": {
                        "type": "boolean",
                        "title": "Schema Test Passed"
                    }
                },
                "type": "object",
                "required": [
                    "constraints_count",
                    "vector_index_exists",
                    "node_count",
                    "schema_test_passed"
                ],
                "title": "SchemaValidation",
                "description": "Schema validation results"
            },
            "SearchRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "minLength": 1,
                        "title": "Query",
                        "description": "Search query text (2-3 word phrases work best)"
                    },
                    "limit": {
                        "type": "integer",
                        "maximum": 100.0,
                        "minimum": 1.0,
                        "title": "Limit",
                        "description": "Maximum number of results to return",
                        "default": 10
                    },
                    "min_similarity": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Min Similarity",
                        "description": "Minimum similarity score (0.0-1.0, default 70%)",
                        "default": 0.7
                    },
                    "offset": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Offset",
                        "description": "Number of results to skip for pagination (default: 0)",
                        "default": 0
                    },
                    "include_evidence": {
                        "type": "boolean",
                        "title": "Include Evidence",
                        "description": "Include sample evidence instances (quotes from source text) for each concept",
                        "default": false
                    },
                    "include_grounding": {
                        "type": "boolean",
                        "title": "Include Grounding",
                        "description": "Include grounding strength (ADR-044: probabilistic truth score) for each concept",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "SearchRequest",
                "description": "Request to search for concepts using semantic similarity.\n\nUses vector embeddings to find concepts matching the query text.\nReturns concepts ranked by cosine similarity score."
            },
            "SearchResponse": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "Original search query"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count",
                        "description": "Number of results returned"
                    },
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ConceptSearchResult"
                        },
                        "type": "array",
                        "title": "Results",
                        "description": "Ranked search results"
                    },
                    "below_threshold_count": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Below Threshold Count",
                        "description": "Number of additional concepts below threshold"
                    },
                    "suggested_threshold": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Suggested Threshold",
                        "description": "Suggested threshold to reveal below-threshold results"
                    },
                    "top_match": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ConceptSearchResult"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Best matching concept below threshold for quick preview"
                    },
                    "threshold_used": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Threshold Used",
                        "description": "Similarity threshold used for filtering"
                    },
                    "offset": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Offset",
                        "description": "Offset used for pagination"
                    }
                },
                "type": "object",
                "required": [
                    "query",
                    "count",
                    "results"
                ],
                "title": "SearchResponse",
                "description": "Search results with smart threshold hints.\n\nIf few results found at current threshold, suggests lowering threshold\nto reveal near-miss concepts."
            },
            "SystemStatusResponse": {
                "properties": {
                    "docker": {
                        "$ref": "#/components/schemas/DockerStatus"
                    },
                    "database_connection": {
                        "$ref": "#/components/schemas/DatabaseConnection"
                    },
                    "database_stats": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/DatabaseStats"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "python_env": {
                        "$ref": "#/components/schemas/PythonEnvironment"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/ConfigurationStatus"
                    },
                    "neo4j_browser_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Neo4J Browser Url"
                    },
                    "bolt_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bolt Url"
                    }
                },
                "type": "object",
                "required": [
                    "docker",
                    "database_connection",
                    "python_env",
                    "configuration"
                ],
                "title": "SystemStatusResponse",
                "description": "Complete system status"
            },
            "UpdateEmbeddingConfigRequest": {
                "properties": {
                    "provider": {
                        "type": "string",
                        "title": "Provider",
                        "description": "Provider: 'openai' or 'local'"
                    },
                    "model_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Model Name",
                        "description": "HuggingFace model ID (for local)"
                    },
                    "embedding_dimensions": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Embedding Dimensions",
                        "description": "Vector dimensions"
                    },
                    "precision": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Precision",
                        "description": "Precision: 'float16' or 'float32'",
                        "default": "float16"
                    },
                    "max_memory_mb": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Memory Mb",
                        "description": "RAM limit (MB)"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads",
                        "description": "CPU threads"
                    },
                    "device": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Device",
                        "description": "Device: 'cpu', 'cuda', or 'mps'",
                        "default": "cpu"
                    },
                    "batch_size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Size",
                        "description": "Batch size for generation",
                        "default": 8
                    },
                    "max_seq_length": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Seq Length",
                        "description": "Max sequence length (tokens)"
                    },
                    "normalize_embeddings": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Normalize Embeddings",
                        "description": "Normalize embeddings for cosine similarity",
                        "default": true
                    },
                    "updated_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated By",
                        "description": "User/admin who made the change",
                        "default": "api"
                    }
                },
                "type": "object",
                "required": [
                    "provider"
                ],
                "title": "UpdateEmbeddingConfigRequest",
                "description": "Request to update embedding configuration.\n\nAll fields are optional. Omitted fields keep existing values."
            },
            "UpdateEmbeddingConfigResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "config_id": {
                        "type": "integer",
                        "title": "Config Id"
                    },
                    "reload_required": {
                        "type": "boolean",
                        "title": "Reload Required",
                        "description": "True if API restart required to apply changes (Phase 1). In Phase 2, this triggers automatic hot reload."
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "message",
                    "config_id",
                    "reload_required"
                ],
                "title": "UpdateEmbeddingConfigResponse",
                "description": "Response after updating embedding configuration"
            },
            "UpdateExtractionConfigRequest": {
                "properties": {
                    "provider": {
                        "type": "string",
                        "title": "Provider",
                        "description": "Provider: 'openai', 'anthropic', or 'ollama'"
                    },
                    "model_name": {
                        "type": "string",
                        "title": "Model Name",
                        "description": "Model identifier (e.g., 'gpt-4o', 'mistral:7b-instruct')"
                    },
                    "supports_vision": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Supports Vision",
                        "description": "Model supports vision inputs",
                        "default": false
                    },
                    "supports_json_mode": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Supports Json Mode",
                        "description": "Model supports JSON mode",
                        "default": true
                    },
                    "max_tokens": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Tokens",
                        "description": "Maximum token limit"
                    },
                    "updated_by": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Updated By",
                        "description": "User/admin who made the change",
                        "default": "api"
                    },
                    "base_url": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Url",
                        "description": "Base URL for local providers"
                    },
                    "temperature": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Temperature",
                        "description": "Sampling temperature (0.0-1.0)"
                    },
                    "top_p": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Top P",
                        "description": "Nucleus sampling (0.0-1.0)"
                    },
                    "gpu_layers": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Gpu Layers",
                        "description": "GPU layers: -1=auto, 0=CPU, >0=specific"
                    },
                    "num_threads": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Num Threads",
                        "description": "CPU threads for inference"
                    },
                    "thinking_mode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thinking Mode",
                        "description": "Thinking mode: 'off', 'low', 'medium', 'high' (Ollama 0.12.x+)",
                        "default": "off"
                    }
                },
                "type": "object",
                "required": [
                    "provider",
                    "model_name"
                ],
                "title": "UpdateExtractionConfigRequest",
                "description": "Request to update AI extraction configuration.\n\nAll fields except provider and model_name are optional."
            },
            "UpdateExtractionConfigResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "config_id": {
                        "type": "integer",
                        "title": "Config Id"
                    },
                    "reload_required": {
                        "type": "boolean",
                        "title": "Reload Required",
                        "description": "True if API restart required to apply changes. In DEVELOPMENT_MODE=false, configuration is loaded from database on startup."
                    }
                },
                "type": "object",
                "required": [
                    "success",
                    "message",
                    "config_id",
                    "reload_required"
                ],
                "title": "UpdateExtractionConfigResponse",
                "description": "Response after updating AI extraction configuration"
            },
            "UserCreate": {
                "properties": {
                    "username": {
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 3,
                        "title": "Username",
                        "description": "Unique username"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role",
                        "description": "User role: read_only, contributor, curator, admin"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "title": "Password",
                        "description": "Password (will be hashed)"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "role",
                    "password"
                ],
                "title": "UserCreate",
                "description": "Schema for creating a new user",
                "examples": [
                    {
                        "password": "SecurePass123!",
                        "role": "contributor",
                        "username": "alice"
                    }
                ]
            },
            "UserListResponse": {
                "properties": {
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserRead"
                        },
                        "type": "array",
                        "title": "Users",
                        "description": "List of users"
                    },
                    "total": {
                        "type": "integer",
                        "title": "Total",
                        "description": "Total number of users"
                    },
                    "skip": {
                        "type": "integer",
                        "title": "Skip",
                        "description": "Number of users skipped",
                        "default": 0
                    },
                    "limit": {
                        "type": "integer",
                        "title": "Limit",
                        "description": "Maximum users returned",
                        "default": 100
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "total"
                ],
                "title": "UserListResponse",
                "description": "Paginated list of users",
                "examples": [
                    {
                        "limit": 100,
                        "skip": 0,
                        "total": 2,
                        "users": [
                            {
                                "created_at": "2025-10-10T00:00:00Z",
                                "disabled": false,
                                "id": 1,
                                "last_login": "2025-10-11T15:30:00Z",
                                "role": "admin",
                                "username": "admin"
                            },
                            {
                                "created_at": "2025-10-11T12:00:00Z",
                                "disabled": false,
                                "id": 2,
                                "last_login": "2025-10-11T15:30:00Z",
                                "role": "curator",
                                "username": "alice"
                            }
                        ]
                    }
                ]
            },
            "UserRead": {
                "properties": {
                    "username": {
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 3,
                        "title": "Username",
                        "description": "Unique username"
                    },
                    "role": {
                        "type": "string",
                        "title": "Role",
                        "description": "User role: read_only, contributor, curator, admin"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id",
                        "description": "User ID"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "Account creation timestamp"
                    },
                    "last_login": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Login",
                        "description": "Last login timestamp"
                    },
                    "disabled": {
                        "type": "boolean",
                        "title": "Disabled",
                        "description": "Whether account is disabled",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "role",
                    "id",
                    "created_at"
                ],
                "title": "UserRead",
                "description": "Schema for reading user data (excludes password)",
                "examples": [
                    {
                        "created_at": "2025-10-11T12:00:00Z",
                        "disabled": false,
                        "id": 42,
                        "last_login": "2025-10-11T15:30:00Z",
                        "role": "curator",
                        "username": "alice"
                    }
                ]
            },
            "UserRoleAssign": {
                "properties": {
                    "user_id": {
                        "type": "integer",
                        "title": "User Id"
                    },
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    },
                    "scope_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Type",
                        "default": "global"
                    },
                    "scope_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Id"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At"
                    }
                },
                "type": "object",
                "required": [
                    "user_id",
                    "role_name"
                ],
                "title": "UserRoleAssign"
            },
            "UserRoleRead": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "user_id": {
                        "type": "integer",
                        "title": "User Id"
                    },
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    },
                    "scope_type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Type"
                    },
                    "scope_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scope Id"
                    },
                    "assigned_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Assigned At"
                    },
                    "assigned_by": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Assigned By"
                    },
                    "expires_at": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expires At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_id",
                    "role_name",
                    "scope_type",
                    "scope_id",
                    "assigned_at",
                    "assigned_by",
                    "expires_at"
                ],
                "title": "UserRoleRead"
            },
            "UserUpdate": {
                "properties": {
                    "password": {
                        "anyOf": [
                            {
                                "type": "string",
                                "minLength": 8
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Password",
                        "description": "New password (optional)"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Role",
                        "description": "New role (admin only)"
                    },
                    "disabled": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Disabled",
                        "description": "Disable/enable account (admin only)"
                    }
                },
                "type": "object",
                "title": "UserUpdate",
                "description": "Schema for updating user data",
                "examples": [
                    {
                        "disabled": false,
                        "password": "NewSecurePass456!",
                        "role": "curator"
                    }
                ]
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "VocabularyStatusResponse": {
                "properties": {
                    "vocab_size": {
                        "type": "integer",
                        "title": "Vocab Size"
                    },
                    "vocab_min": {
                        "type": "integer",
                        "title": "Vocab Min"
                    },
                    "vocab_max": {
                        "type": "integer",
                        "title": "Vocab Max"
                    },
                    "vocab_emergency": {
                        "type": "integer",
                        "title": "Vocab Emergency"
                    },
                    "aggressiveness": {
                        "type": "number",
                        "title": "Aggressiveness"
                    },
                    "zone": {
                        "$ref": "#/components/schemas/ZoneEnum"
                    },
                    "builtin_types": {
                        "type": "integer",
                        "title": "Builtin Types"
                    },
                    "custom_types": {
                        "type": "integer",
                        "title": "Custom Types"
                    },
                    "categories": {
                        "type": "integer",
                        "title": "Categories"
                    },
                    "profile": {
                        "type": "string",
                        "title": "Profile"
                    }
                },
                "type": "object",
                "required": [
                    "vocab_size",
                    "vocab_min",
                    "vocab_max",
                    "vocab_emergency",
                    "aggressiveness",
                    "zone",
                    "builtin_types",
                    "custom_types",
                    "categories",
                    "profile"
                ],
                "title": "VocabularyStatusResponse",
                "description": "Current vocabulary status"
            },
            "ZoneEnum": {
                "type": "string",
                "enum": [
                    "comfort",
                    "watch",
                    "merge",
                    "mixed",
                    "emergency",
                    "block"
                ],
                "title": "ZoneEnum",
                "description": "Aggressiveness zone"
            }
        },
        "securitySchemes": {
            "JWT": {
                "type": "oauth2",
                "description": "JWT token from /auth/login",
                "flows": {
                    "password": {
                        "scopes": {},
                        "tokenUrl": "/auth/login"
                    }
                }
            }
        }
    }
}
